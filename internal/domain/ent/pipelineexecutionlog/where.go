// Code generated by ent, DO NOT EDIT.

package pipelineexecutionlog

import (
	"QuickBrick/internal/domain/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLTE(FieldID, id))
}

// Env applies equality check predicate on the "env" field. It's identical to EnvEQ.
func Env(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldEnv, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldType, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldEventType, v))
}

// PipelineName applies equality check predicate on the "pipeline_name" field. It's identical to PipelineNameEQ.
func PipelineName(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldPipelineName, v))
}

// UsernameEmail applies equality check predicate on the "username_email" field. It's identical to UsernameEmailEQ.
func UsernameEmail(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldUsernameEmail, v))
}

// CommitID applies equality check predicate on the "commit_id" field. It's identical to CommitIDEQ.
func CommitID(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldCommitID, v))
}

// ProjectURL applies equality check predicate on the "project_url" field. It's identical to ProjectURLEQ.
func ProjectURL(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldProjectURL, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldCreatedAt, v))
}

// EnvEQ applies the EQ predicate on the "env" field.
func EnvEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldEnv, v))
}

// EnvNEQ applies the NEQ predicate on the "env" field.
func EnvNEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNEQ(FieldEnv, v))
}

// EnvIn applies the In predicate on the "env" field.
func EnvIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldIn(FieldEnv, vs...))
}

// EnvNotIn applies the NotIn predicate on the "env" field.
func EnvNotIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNotIn(FieldEnv, vs...))
}

// EnvGT applies the GT predicate on the "env" field.
func EnvGT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGT(FieldEnv, v))
}

// EnvGTE applies the GTE predicate on the "env" field.
func EnvGTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGTE(FieldEnv, v))
}

// EnvLT applies the LT predicate on the "env" field.
func EnvLT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLT(FieldEnv, v))
}

// EnvLTE applies the LTE predicate on the "env" field.
func EnvLTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLTE(FieldEnv, v))
}

// EnvContains applies the Contains predicate on the "env" field.
func EnvContains(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContains(FieldEnv, v))
}

// EnvHasPrefix applies the HasPrefix predicate on the "env" field.
func EnvHasPrefix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasPrefix(FieldEnv, v))
}

// EnvHasSuffix applies the HasSuffix predicate on the "env" field.
func EnvHasSuffix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasSuffix(FieldEnv, v))
}

// EnvEqualFold applies the EqualFold predicate on the "env" field.
func EnvEqualFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEqualFold(FieldEnv, v))
}

// EnvContainsFold applies the ContainsFold predicate on the "env" field.
func EnvContainsFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContainsFold(FieldEnv, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContainsFold(FieldType, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContainsFold(FieldEventType, v))
}

// PipelineNameEQ applies the EQ predicate on the "pipeline_name" field.
func PipelineNameEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldPipelineName, v))
}

// PipelineNameNEQ applies the NEQ predicate on the "pipeline_name" field.
func PipelineNameNEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNEQ(FieldPipelineName, v))
}

// PipelineNameIn applies the In predicate on the "pipeline_name" field.
func PipelineNameIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldIn(FieldPipelineName, vs...))
}

// PipelineNameNotIn applies the NotIn predicate on the "pipeline_name" field.
func PipelineNameNotIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNotIn(FieldPipelineName, vs...))
}

// PipelineNameGT applies the GT predicate on the "pipeline_name" field.
func PipelineNameGT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGT(FieldPipelineName, v))
}

// PipelineNameGTE applies the GTE predicate on the "pipeline_name" field.
func PipelineNameGTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGTE(FieldPipelineName, v))
}

// PipelineNameLT applies the LT predicate on the "pipeline_name" field.
func PipelineNameLT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLT(FieldPipelineName, v))
}

// PipelineNameLTE applies the LTE predicate on the "pipeline_name" field.
func PipelineNameLTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLTE(FieldPipelineName, v))
}

// PipelineNameContains applies the Contains predicate on the "pipeline_name" field.
func PipelineNameContains(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContains(FieldPipelineName, v))
}

// PipelineNameHasPrefix applies the HasPrefix predicate on the "pipeline_name" field.
func PipelineNameHasPrefix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasPrefix(FieldPipelineName, v))
}

// PipelineNameHasSuffix applies the HasSuffix predicate on the "pipeline_name" field.
func PipelineNameHasSuffix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasSuffix(FieldPipelineName, v))
}

// PipelineNameEqualFold applies the EqualFold predicate on the "pipeline_name" field.
func PipelineNameEqualFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEqualFold(FieldPipelineName, v))
}

// PipelineNameContainsFold applies the ContainsFold predicate on the "pipeline_name" field.
func PipelineNameContainsFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContainsFold(FieldPipelineName, v))
}

// UsernameEmailEQ applies the EQ predicate on the "username_email" field.
func UsernameEmailEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldUsernameEmail, v))
}

// UsernameEmailNEQ applies the NEQ predicate on the "username_email" field.
func UsernameEmailNEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNEQ(FieldUsernameEmail, v))
}

// UsernameEmailIn applies the In predicate on the "username_email" field.
func UsernameEmailIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldIn(FieldUsernameEmail, vs...))
}

// UsernameEmailNotIn applies the NotIn predicate on the "username_email" field.
func UsernameEmailNotIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNotIn(FieldUsernameEmail, vs...))
}

// UsernameEmailGT applies the GT predicate on the "username_email" field.
func UsernameEmailGT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGT(FieldUsernameEmail, v))
}

// UsernameEmailGTE applies the GTE predicate on the "username_email" field.
func UsernameEmailGTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGTE(FieldUsernameEmail, v))
}

// UsernameEmailLT applies the LT predicate on the "username_email" field.
func UsernameEmailLT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLT(FieldUsernameEmail, v))
}

// UsernameEmailLTE applies the LTE predicate on the "username_email" field.
func UsernameEmailLTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLTE(FieldUsernameEmail, v))
}

// UsernameEmailContains applies the Contains predicate on the "username_email" field.
func UsernameEmailContains(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContains(FieldUsernameEmail, v))
}

// UsernameEmailHasPrefix applies the HasPrefix predicate on the "username_email" field.
func UsernameEmailHasPrefix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasPrefix(FieldUsernameEmail, v))
}

// UsernameEmailHasSuffix applies the HasSuffix predicate on the "username_email" field.
func UsernameEmailHasSuffix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasSuffix(FieldUsernameEmail, v))
}

// UsernameEmailEqualFold applies the EqualFold predicate on the "username_email" field.
func UsernameEmailEqualFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEqualFold(FieldUsernameEmail, v))
}

// UsernameEmailContainsFold applies the ContainsFold predicate on the "username_email" field.
func UsernameEmailContainsFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContainsFold(FieldUsernameEmail, v))
}

// CommitIDEQ applies the EQ predicate on the "commit_id" field.
func CommitIDEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldCommitID, v))
}

// CommitIDNEQ applies the NEQ predicate on the "commit_id" field.
func CommitIDNEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNEQ(FieldCommitID, v))
}

// CommitIDIn applies the In predicate on the "commit_id" field.
func CommitIDIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldIn(FieldCommitID, vs...))
}

// CommitIDNotIn applies the NotIn predicate on the "commit_id" field.
func CommitIDNotIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNotIn(FieldCommitID, vs...))
}

// CommitIDGT applies the GT predicate on the "commit_id" field.
func CommitIDGT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGT(FieldCommitID, v))
}

// CommitIDGTE applies the GTE predicate on the "commit_id" field.
func CommitIDGTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGTE(FieldCommitID, v))
}

// CommitIDLT applies the LT predicate on the "commit_id" field.
func CommitIDLT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLT(FieldCommitID, v))
}

// CommitIDLTE applies the LTE predicate on the "commit_id" field.
func CommitIDLTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLTE(FieldCommitID, v))
}

// CommitIDContains applies the Contains predicate on the "commit_id" field.
func CommitIDContains(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContains(FieldCommitID, v))
}

// CommitIDHasPrefix applies the HasPrefix predicate on the "commit_id" field.
func CommitIDHasPrefix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasPrefix(FieldCommitID, v))
}

// CommitIDHasSuffix applies the HasSuffix predicate on the "commit_id" field.
func CommitIDHasSuffix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasSuffix(FieldCommitID, v))
}

// CommitIDEqualFold applies the EqualFold predicate on the "commit_id" field.
func CommitIDEqualFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEqualFold(FieldCommitID, v))
}

// CommitIDContainsFold applies the ContainsFold predicate on the "commit_id" field.
func CommitIDContainsFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContainsFold(FieldCommitID, v))
}

// ProjectURLEQ applies the EQ predicate on the "project_url" field.
func ProjectURLEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldProjectURL, v))
}

// ProjectURLNEQ applies the NEQ predicate on the "project_url" field.
func ProjectURLNEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNEQ(FieldProjectURL, v))
}

// ProjectURLIn applies the In predicate on the "project_url" field.
func ProjectURLIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldIn(FieldProjectURL, vs...))
}

// ProjectURLNotIn applies the NotIn predicate on the "project_url" field.
func ProjectURLNotIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNotIn(FieldProjectURL, vs...))
}

// ProjectURLGT applies the GT predicate on the "project_url" field.
func ProjectURLGT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGT(FieldProjectURL, v))
}

// ProjectURLGTE applies the GTE predicate on the "project_url" field.
func ProjectURLGTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGTE(FieldProjectURL, v))
}

// ProjectURLLT applies the LT predicate on the "project_url" field.
func ProjectURLLT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLT(FieldProjectURL, v))
}

// ProjectURLLTE applies the LTE predicate on the "project_url" field.
func ProjectURLLTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLTE(FieldProjectURL, v))
}

// ProjectURLContains applies the Contains predicate on the "project_url" field.
func ProjectURLContains(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContains(FieldProjectURL, v))
}

// ProjectURLHasPrefix applies the HasPrefix predicate on the "project_url" field.
func ProjectURLHasPrefix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasPrefix(FieldProjectURL, v))
}

// ProjectURLHasSuffix applies the HasSuffix predicate on the "project_url" field.
func ProjectURLHasSuffix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasSuffix(FieldProjectURL, v))
}

// ProjectURLEqualFold applies the EqualFold predicate on the "project_url" field.
func ProjectURLEqualFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEqualFold(FieldProjectURL, v))
}

// ProjectURLContainsFold applies the ContainsFold predicate on the "project_url" field.
func ProjectURLContainsFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContainsFold(FieldProjectURL, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PipelineExecutionLog) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PipelineExecutionLog) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PipelineExecutionLog) predicate.PipelineExecutionLog {
	return predicate.PipelineExecutionLog(sql.NotPredicates(p))
}
