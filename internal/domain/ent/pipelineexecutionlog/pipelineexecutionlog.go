// Code generated by ent, DO NOT EDIT.

package pipelineexecutionlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the pipelineexecutionlog type in the database.
	Label = "pipeline_execution_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEnv holds the string denoting the env field in the database.
	FieldEnv = "env"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldPipelineName holds the string denoting the pipeline_name field in the database.
	FieldPipelineName = "pipeline_name"
	// FieldUsernameEmail holds the string denoting the username_email field in the database.
	FieldUsernameEmail = "username_email"
	// FieldCommitID holds the string denoting the commit_id field in the database.
	FieldCommitID = "commit_id"
	// FieldProjectURL holds the string denoting the project_url field in the database.
	FieldProjectURL = "project_url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the pipelineexecutionlog in the database.
	Table = "pipeline_execution_log"
)

// Columns holds all SQL columns for pipelineexecutionlog fields.
var Columns = []string{
	FieldID,
	FieldEnv,
	FieldType,
	FieldEventType,
	FieldPipelineName,
	FieldUsernameEmail,
	FieldCommitID,
	FieldProjectURL,
	FieldStatus,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the PipelineExecutionLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEnv orders the results by the env field.
func ByEnv(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnv, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByPipelineName orders the results by the pipeline_name field.
func ByPipelineName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPipelineName, opts...).ToFunc()
}

// ByUsernameEmail orders the results by the username_email field.
func ByUsernameEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsernameEmail, opts...).ToFunc()
}

// ByCommitID orders the results by the commit_id field.
func ByCommitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitID, opts...).ToFunc()
}

// ByProjectURL orders the results by the project_url field.
func ByProjectURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectURL, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
