// Code generated by ent, DO NOT EDIT.

package retryhistory

import (
	"QuickBrick/internal/domain/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// Env applies equality check predicate on the "env" field. It's identical to EnvEQ.
func Env(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldEnv, v))
}

// Project applies equality check predicate on the "project" field. It's identical to ProjectEQ.
func Project(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldProject, v))
}

// ProjectURL applies equality check predicate on the "project_url" field. It's identical to ProjectURLEQ.
func ProjectURL(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldProjectURL, v))
}

// Ref applies equality check predicate on the "ref" field. It's identical to RefEQ.
func Ref(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldRef, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldEventType, v))
}

// CommitID applies equality check predicate on the "commit_id" field. It's identical to CommitIDEQ.
func CommitID(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldCommitID, v))
}

// Committer applies equality check predicate on the "committer" field. It's identical to CommitterEQ.
func Committer(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldCommitter, v))
}

// CommitMessage applies equality check predicate on the "commit_message" field. It's identical to CommitMessageEQ.
func CommitMessage(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldCommitMessage, v))
}

// CommitURL applies equality check predicate on the "commit_url" field. It's identical to CommitURLEQ.
func CommitURL(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldCommitURL, v))
}

// PipelineName applies equality check predicate on the "pipeline_name" field. It's identical to PipelineNameEQ.
func PipelineName(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldPipelineName, v))
}

// PipelineType applies equality check predicate on the "pipeline_type" field. It's identical to PipelineTypeEQ.
func PipelineType(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldPipelineType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// EnvEQ applies the EQ predicate on the "env" field.
func EnvEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldEnv, v))
}

// EnvNEQ applies the NEQ predicate on the "env" field.
func EnvNEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNEQ(FieldEnv, v))
}

// EnvIn applies the In predicate on the "env" field.
func EnvIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldIn(FieldEnv, vs...))
}

// EnvNotIn applies the NotIn predicate on the "env" field.
func EnvNotIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNotIn(FieldEnv, vs...))
}

// EnvGT applies the GT predicate on the "env" field.
func EnvGT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGT(FieldEnv, v))
}

// EnvGTE applies the GTE predicate on the "env" field.
func EnvGTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGTE(FieldEnv, v))
}

// EnvLT applies the LT predicate on the "env" field.
func EnvLT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLT(FieldEnv, v))
}

// EnvLTE applies the LTE predicate on the "env" field.
func EnvLTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLTE(FieldEnv, v))
}

// EnvContains applies the Contains predicate on the "env" field.
func EnvContains(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContains(FieldEnv, v))
}

// EnvHasPrefix applies the HasPrefix predicate on the "env" field.
func EnvHasPrefix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasPrefix(FieldEnv, v))
}

// EnvHasSuffix applies the HasSuffix predicate on the "env" field.
func EnvHasSuffix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasSuffix(FieldEnv, v))
}

// EnvEqualFold applies the EqualFold predicate on the "env" field.
func EnvEqualFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEqualFold(FieldEnv, v))
}

// EnvContainsFold applies the ContainsFold predicate on the "env" field.
func EnvContainsFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContainsFold(FieldEnv, v))
}

// ProjectEQ applies the EQ predicate on the "project" field.
func ProjectEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldProject, v))
}

// ProjectNEQ applies the NEQ predicate on the "project" field.
func ProjectNEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNEQ(FieldProject, v))
}

// ProjectIn applies the In predicate on the "project" field.
func ProjectIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldIn(FieldProject, vs...))
}

// ProjectNotIn applies the NotIn predicate on the "project" field.
func ProjectNotIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNotIn(FieldProject, vs...))
}

// ProjectGT applies the GT predicate on the "project" field.
func ProjectGT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGT(FieldProject, v))
}

// ProjectGTE applies the GTE predicate on the "project" field.
func ProjectGTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGTE(FieldProject, v))
}

// ProjectLT applies the LT predicate on the "project" field.
func ProjectLT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLT(FieldProject, v))
}

// ProjectLTE applies the LTE predicate on the "project" field.
func ProjectLTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLTE(FieldProject, v))
}

// ProjectContains applies the Contains predicate on the "project" field.
func ProjectContains(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContains(FieldProject, v))
}

// ProjectHasPrefix applies the HasPrefix predicate on the "project" field.
func ProjectHasPrefix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasPrefix(FieldProject, v))
}

// ProjectHasSuffix applies the HasSuffix predicate on the "project" field.
func ProjectHasSuffix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasSuffix(FieldProject, v))
}

// ProjectEqualFold applies the EqualFold predicate on the "project" field.
func ProjectEqualFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEqualFold(FieldProject, v))
}

// ProjectContainsFold applies the ContainsFold predicate on the "project" field.
func ProjectContainsFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContainsFold(FieldProject, v))
}

// ProjectURLEQ applies the EQ predicate on the "project_url" field.
func ProjectURLEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldProjectURL, v))
}

// ProjectURLNEQ applies the NEQ predicate on the "project_url" field.
func ProjectURLNEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNEQ(FieldProjectURL, v))
}

// ProjectURLIn applies the In predicate on the "project_url" field.
func ProjectURLIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldIn(FieldProjectURL, vs...))
}

// ProjectURLNotIn applies the NotIn predicate on the "project_url" field.
func ProjectURLNotIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNotIn(FieldProjectURL, vs...))
}

// ProjectURLGT applies the GT predicate on the "project_url" field.
func ProjectURLGT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGT(FieldProjectURL, v))
}

// ProjectURLGTE applies the GTE predicate on the "project_url" field.
func ProjectURLGTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGTE(FieldProjectURL, v))
}

// ProjectURLLT applies the LT predicate on the "project_url" field.
func ProjectURLLT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLT(FieldProjectURL, v))
}

// ProjectURLLTE applies the LTE predicate on the "project_url" field.
func ProjectURLLTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLTE(FieldProjectURL, v))
}

// ProjectURLContains applies the Contains predicate on the "project_url" field.
func ProjectURLContains(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContains(FieldProjectURL, v))
}

// ProjectURLHasPrefix applies the HasPrefix predicate on the "project_url" field.
func ProjectURLHasPrefix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasPrefix(FieldProjectURL, v))
}

// ProjectURLHasSuffix applies the HasSuffix predicate on the "project_url" field.
func ProjectURLHasSuffix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasSuffix(FieldProjectURL, v))
}

// ProjectURLEqualFold applies the EqualFold predicate on the "project_url" field.
func ProjectURLEqualFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEqualFold(FieldProjectURL, v))
}

// ProjectURLContainsFold applies the ContainsFold predicate on the "project_url" field.
func ProjectURLContainsFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContainsFold(FieldProjectURL, v))
}

// RefEQ applies the EQ predicate on the "ref" field.
func RefEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldRef, v))
}

// RefNEQ applies the NEQ predicate on the "ref" field.
func RefNEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNEQ(FieldRef, v))
}

// RefIn applies the In predicate on the "ref" field.
func RefIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldIn(FieldRef, vs...))
}

// RefNotIn applies the NotIn predicate on the "ref" field.
func RefNotIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNotIn(FieldRef, vs...))
}

// RefGT applies the GT predicate on the "ref" field.
func RefGT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGT(FieldRef, v))
}

// RefGTE applies the GTE predicate on the "ref" field.
func RefGTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGTE(FieldRef, v))
}

// RefLT applies the LT predicate on the "ref" field.
func RefLT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLT(FieldRef, v))
}

// RefLTE applies the LTE predicate on the "ref" field.
func RefLTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLTE(FieldRef, v))
}

// RefContains applies the Contains predicate on the "ref" field.
func RefContains(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContains(FieldRef, v))
}

// RefHasPrefix applies the HasPrefix predicate on the "ref" field.
func RefHasPrefix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasPrefix(FieldRef, v))
}

// RefHasSuffix applies the HasSuffix predicate on the "ref" field.
func RefHasSuffix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasSuffix(FieldRef, v))
}

// RefEqualFold applies the EqualFold predicate on the "ref" field.
func RefEqualFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEqualFold(FieldRef, v))
}

// RefContainsFold applies the ContainsFold predicate on the "ref" field.
func RefContainsFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContainsFold(FieldRef, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContainsFold(FieldEventType, v))
}

// CommitIDEQ applies the EQ predicate on the "commit_id" field.
func CommitIDEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldCommitID, v))
}

// CommitIDNEQ applies the NEQ predicate on the "commit_id" field.
func CommitIDNEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNEQ(FieldCommitID, v))
}

// CommitIDIn applies the In predicate on the "commit_id" field.
func CommitIDIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldIn(FieldCommitID, vs...))
}

// CommitIDNotIn applies the NotIn predicate on the "commit_id" field.
func CommitIDNotIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNotIn(FieldCommitID, vs...))
}

// CommitIDGT applies the GT predicate on the "commit_id" field.
func CommitIDGT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGT(FieldCommitID, v))
}

// CommitIDGTE applies the GTE predicate on the "commit_id" field.
func CommitIDGTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGTE(FieldCommitID, v))
}

// CommitIDLT applies the LT predicate on the "commit_id" field.
func CommitIDLT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLT(FieldCommitID, v))
}

// CommitIDLTE applies the LTE predicate on the "commit_id" field.
func CommitIDLTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLTE(FieldCommitID, v))
}

// CommitIDContains applies the Contains predicate on the "commit_id" field.
func CommitIDContains(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContains(FieldCommitID, v))
}

// CommitIDHasPrefix applies the HasPrefix predicate on the "commit_id" field.
func CommitIDHasPrefix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasPrefix(FieldCommitID, v))
}

// CommitIDHasSuffix applies the HasSuffix predicate on the "commit_id" field.
func CommitIDHasSuffix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasSuffix(FieldCommitID, v))
}

// CommitIDEqualFold applies the EqualFold predicate on the "commit_id" field.
func CommitIDEqualFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEqualFold(FieldCommitID, v))
}

// CommitIDContainsFold applies the ContainsFold predicate on the "commit_id" field.
func CommitIDContainsFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContainsFold(FieldCommitID, v))
}

// CommitterEQ applies the EQ predicate on the "committer" field.
func CommitterEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldCommitter, v))
}

// CommitterNEQ applies the NEQ predicate on the "committer" field.
func CommitterNEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNEQ(FieldCommitter, v))
}

// CommitterIn applies the In predicate on the "committer" field.
func CommitterIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldIn(FieldCommitter, vs...))
}

// CommitterNotIn applies the NotIn predicate on the "committer" field.
func CommitterNotIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNotIn(FieldCommitter, vs...))
}

// CommitterGT applies the GT predicate on the "committer" field.
func CommitterGT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGT(FieldCommitter, v))
}

// CommitterGTE applies the GTE predicate on the "committer" field.
func CommitterGTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGTE(FieldCommitter, v))
}

// CommitterLT applies the LT predicate on the "committer" field.
func CommitterLT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLT(FieldCommitter, v))
}

// CommitterLTE applies the LTE predicate on the "committer" field.
func CommitterLTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLTE(FieldCommitter, v))
}

// CommitterContains applies the Contains predicate on the "committer" field.
func CommitterContains(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContains(FieldCommitter, v))
}

// CommitterHasPrefix applies the HasPrefix predicate on the "committer" field.
func CommitterHasPrefix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasPrefix(FieldCommitter, v))
}

// CommitterHasSuffix applies the HasSuffix predicate on the "committer" field.
func CommitterHasSuffix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasSuffix(FieldCommitter, v))
}

// CommitterEqualFold applies the EqualFold predicate on the "committer" field.
func CommitterEqualFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEqualFold(FieldCommitter, v))
}

// CommitterContainsFold applies the ContainsFold predicate on the "committer" field.
func CommitterContainsFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContainsFold(FieldCommitter, v))
}

// CommitMessageEQ applies the EQ predicate on the "commit_message" field.
func CommitMessageEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldCommitMessage, v))
}

// CommitMessageNEQ applies the NEQ predicate on the "commit_message" field.
func CommitMessageNEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNEQ(FieldCommitMessage, v))
}

// CommitMessageIn applies the In predicate on the "commit_message" field.
func CommitMessageIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldIn(FieldCommitMessage, vs...))
}

// CommitMessageNotIn applies the NotIn predicate on the "commit_message" field.
func CommitMessageNotIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNotIn(FieldCommitMessage, vs...))
}

// CommitMessageGT applies the GT predicate on the "commit_message" field.
func CommitMessageGT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGT(FieldCommitMessage, v))
}

// CommitMessageGTE applies the GTE predicate on the "commit_message" field.
func CommitMessageGTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGTE(FieldCommitMessage, v))
}

// CommitMessageLT applies the LT predicate on the "commit_message" field.
func CommitMessageLT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLT(FieldCommitMessage, v))
}

// CommitMessageLTE applies the LTE predicate on the "commit_message" field.
func CommitMessageLTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLTE(FieldCommitMessage, v))
}

// CommitMessageContains applies the Contains predicate on the "commit_message" field.
func CommitMessageContains(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContains(FieldCommitMessage, v))
}

// CommitMessageHasPrefix applies the HasPrefix predicate on the "commit_message" field.
func CommitMessageHasPrefix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasPrefix(FieldCommitMessage, v))
}

// CommitMessageHasSuffix applies the HasSuffix predicate on the "commit_message" field.
func CommitMessageHasSuffix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasSuffix(FieldCommitMessage, v))
}

// CommitMessageEqualFold applies the EqualFold predicate on the "commit_message" field.
func CommitMessageEqualFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEqualFold(FieldCommitMessage, v))
}

// CommitMessageContainsFold applies the ContainsFold predicate on the "commit_message" field.
func CommitMessageContainsFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContainsFold(FieldCommitMessage, v))
}

// CommitURLEQ applies the EQ predicate on the "commit_url" field.
func CommitURLEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldCommitURL, v))
}

// CommitURLNEQ applies the NEQ predicate on the "commit_url" field.
func CommitURLNEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNEQ(FieldCommitURL, v))
}

// CommitURLIn applies the In predicate on the "commit_url" field.
func CommitURLIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldIn(FieldCommitURL, vs...))
}

// CommitURLNotIn applies the NotIn predicate on the "commit_url" field.
func CommitURLNotIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNotIn(FieldCommitURL, vs...))
}

// CommitURLGT applies the GT predicate on the "commit_url" field.
func CommitURLGT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGT(FieldCommitURL, v))
}

// CommitURLGTE applies the GTE predicate on the "commit_url" field.
func CommitURLGTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGTE(FieldCommitURL, v))
}

// CommitURLLT applies the LT predicate on the "commit_url" field.
func CommitURLLT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLT(FieldCommitURL, v))
}

// CommitURLLTE applies the LTE predicate on the "commit_url" field.
func CommitURLLTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLTE(FieldCommitURL, v))
}

// CommitURLContains applies the Contains predicate on the "commit_url" field.
func CommitURLContains(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContains(FieldCommitURL, v))
}

// CommitURLHasPrefix applies the HasPrefix predicate on the "commit_url" field.
func CommitURLHasPrefix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasPrefix(FieldCommitURL, v))
}

// CommitURLHasSuffix applies the HasSuffix predicate on the "commit_url" field.
func CommitURLHasSuffix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasSuffix(FieldCommitURL, v))
}

// CommitURLEqualFold applies the EqualFold predicate on the "commit_url" field.
func CommitURLEqualFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEqualFold(FieldCommitURL, v))
}

// CommitURLContainsFold applies the ContainsFold predicate on the "commit_url" field.
func CommitURLContainsFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContainsFold(FieldCommitURL, v))
}

// PipelineNameEQ applies the EQ predicate on the "pipeline_name" field.
func PipelineNameEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldPipelineName, v))
}

// PipelineNameNEQ applies the NEQ predicate on the "pipeline_name" field.
func PipelineNameNEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNEQ(FieldPipelineName, v))
}

// PipelineNameIn applies the In predicate on the "pipeline_name" field.
func PipelineNameIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldIn(FieldPipelineName, vs...))
}

// PipelineNameNotIn applies the NotIn predicate on the "pipeline_name" field.
func PipelineNameNotIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNotIn(FieldPipelineName, vs...))
}

// PipelineNameGT applies the GT predicate on the "pipeline_name" field.
func PipelineNameGT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGT(FieldPipelineName, v))
}

// PipelineNameGTE applies the GTE predicate on the "pipeline_name" field.
func PipelineNameGTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGTE(FieldPipelineName, v))
}

// PipelineNameLT applies the LT predicate on the "pipeline_name" field.
func PipelineNameLT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLT(FieldPipelineName, v))
}

// PipelineNameLTE applies the LTE predicate on the "pipeline_name" field.
func PipelineNameLTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLTE(FieldPipelineName, v))
}

// PipelineNameContains applies the Contains predicate on the "pipeline_name" field.
func PipelineNameContains(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContains(FieldPipelineName, v))
}

// PipelineNameHasPrefix applies the HasPrefix predicate on the "pipeline_name" field.
func PipelineNameHasPrefix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasPrefix(FieldPipelineName, v))
}

// PipelineNameHasSuffix applies the HasSuffix predicate on the "pipeline_name" field.
func PipelineNameHasSuffix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasSuffix(FieldPipelineName, v))
}

// PipelineNameEqualFold applies the EqualFold predicate on the "pipeline_name" field.
func PipelineNameEqualFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEqualFold(FieldPipelineName, v))
}

// PipelineNameContainsFold applies the ContainsFold predicate on the "pipeline_name" field.
func PipelineNameContainsFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContainsFold(FieldPipelineName, v))
}

// PipelineTypeEQ applies the EQ predicate on the "pipeline_type" field.
func PipelineTypeEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEQ(FieldPipelineType, v))
}

// PipelineTypeNEQ applies the NEQ predicate on the "pipeline_type" field.
func PipelineTypeNEQ(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNEQ(FieldPipelineType, v))
}

// PipelineTypeIn applies the In predicate on the "pipeline_type" field.
func PipelineTypeIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldIn(FieldPipelineType, vs...))
}

// PipelineTypeNotIn applies the NotIn predicate on the "pipeline_type" field.
func PipelineTypeNotIn(vs ...string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldNotIn(FieldPipelineType, vs...))
}

// PipelineTypeGT applies the GT predicate on the "pipeline_type" field.
func PipelineTypeGT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGT(FieldPipelineType, v))
}

// PipelineTypeGTE applies the GTE predicate on the "pipeline_type" field.
func PipelineTypeGTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldGTE(FieldPipelineType, v))
}

// PipelineTypeLT applies the LT predicate on the "pipeline_type" field.
func PipelineTypeLT(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLT(FieldPipelineType, v))
}

// PipelineTypeLTE applies the LTE predicate on the "pipeline_type" field.
func PipelineTypeLTE(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldLTE(FieldPipelineType, v))
}

// PipelineTypeContains applies the Contains predicate on the "pipeline_type" field.
func PipelineTypeContains(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContains(FieldPipelineType, v))
}

// PipelineTypeHasPrefix applies the HasPrefix predicate on the "pipeline_type" field.
func PipelineTypeHasPrefix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasPrefix(FieldPipelineType, v))
}

// PipelineTypeHasSuffix applies the HasSuffix predicate on the "pipeline_type" field.
func PipelineTypeHasSuffix(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldHasSuffix(FieldPipelineType, v))
}

// PipelineTypeEqualFold applies the EqualFold predicate on the "pipeline_type" field.
func PipelineTypeEqualFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldEqualFold(FieldPipelineType, v))
}

// PipelineTypeContainsFold applies the ContainsFold predicate on the "pipeline_type" field.
func PipelineTypeContainsFold(v string) predicate.RetryHistory {
	return predicate.RetryHistory(sql.FieldContainsFold(FieldPipelineType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RetryHistory) predicate.RetryHistory {
	return predicate.RetryHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RetryHistory) predicate.RetryHistory {
	return predicate.RetryHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RetryHistory) predicate.RetryHistory {
	return predicate.RetryHistory(sql.NotPredicates(p))
}
