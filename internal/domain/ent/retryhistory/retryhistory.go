// Code generated by ent, DO NOT EDIT.

package retryhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the retryhistory type in the database.
	Label = "retry_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldEnv holds the string denoting the env field in the database.
	FieldEnv = "env"
	// FieldProject holds the string denoting the project field in the database.
	FieldProject = "project"
	// FieldProjectURL holds the string denoting the project_url field in the database.
	FieldProjectURL = "project_url"
	// FieldRef holds the string denoting the ref field in the database.
	FieldRef = "ref"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldCommitID holds the string denoting the commit_id field in the database.
	FieldCommitID = "commit_id"
	// FieldCommitter holds the string denoting the committer field in the database.
	FieldCommitter = "committer"
	// FieldCommitMessage holds the string denoting the commit_message field in the database.
	FieldCommitMessage = "commit_message"
	// FieldCommitURL holds the string denoting the commit_url field in the database.
	FieldCommitURL = "commit_url"
	// FieldPipelineName holds the string denoting the pipeline_name field in the database.
	FieldPipelineName = "pipeline_name"
	// FieldPipelineType holds the string denoting the pipeline_type field in the database.
	FieldPipelineType = "pipeline_type"
	// Table holds the table name of the retryhistory in the database.
	Table = "retry_history"
)

// Columns holds all SQL columns for retryhistory fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldEnv,
	FieldProject,
	FieldProjectURL,
	FieldRef,
	FieldEventType,
	FieldCommitID,
	FieldCommitter,
	FieldCommitMessage,
	FieldCommitURL,
	FieldPipelineName,
	FieldPipelineType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the RetryHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByEnv orders the results by the env field.
func ByEnv(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnv, opts...).ToFunc()
}

// ByProject orders the results by the project field.
func ByProject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProject, opts...).ToFunc()
}

// ByProjectURL orders the results by the project_url field.
func ByProjectURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectURL, opts...).ToFunc()
}

// ByRef orders the results by the ref field.
func ByRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRef, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByCommitID orders the results by the commit_id field.
func ByCommitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitID, opts...).ToFunc()
}

// ByCommitter orders the results by the committer field.
func ByCommitter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitter, opts...).ToFunc()
}

// ByCommitMessage orders the results by the commit_message field.
func ByCommitMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitMessage, opts...).ToFunc()
}

// ByCommitURL orders the results by the commit_url field.
func ByCommitURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitURL, opts...).ToFunc()
}

// ByPipelineName orders the results by the pipeline_name field.
func ByPipelineName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPipelineName, opts...).ToFunc()
}

// ByPipelineType orders the results by the pipeline_type field.
func ByPipelineType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPipelineType, opts...).ToFunc()
}
