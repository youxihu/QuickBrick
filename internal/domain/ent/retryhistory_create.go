// Code generated by ent, DO NOT EDIT.

package ent

import (
	"QuickBrick/internal/domain/ent/retryhistory"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RetryHistoryCreate is the builder for creating a RetryHistory entity.
type RetryHistoryCreate struct {
	config
	mutation *RetryHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rhc *RetryHistoryCreate) SetCreatedAt(t time.Time) *RetryHistoryCreate {
	rhc.mutation.SetCreatedAt(t)
	return rhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rhc *RetryHistoryCreate) SetNillableCreatedAt(t *time.Time) *RetryHistoryCreate {
	if t != nil {
		rhc.SetCreatedAt(*t)
	}
	return rhc
}

// SetEnv sets the "env" field.
func (rhc *RetryHistoryCreate) SetEnv(s string) *RetryHistoryCreate {
	rhc.mutation.SetEnv(s)
	return rhc
}

// SetProject sets the "project" field.
func (rhc *RetryHistoryCreate) SetProject(s string) *RetryHistoryCreate {
	rhc.mutation.SetProject(s)
	return rhc
}

// SetProjectURL sets the "project_url" field.
func (rhc *RetryHistoryCreate) SetProjectURL(s string) *RetryHistoryCreate {
	rhc.mutation.SetProjectURL(s)
	return rhc
}

// SetRef sets the "ref" field.
func (rhc *RetryHistoryCreate) SetRef(s string) *RetryHistoryCreate {
	rhc.mutation.SetRef(s)
	return rhc
}

// SetEventType sets the "event_type" field.
func (rhc *RetryHistoryCreate) SetEventType(s string) *RetryHistoryCreate {
	rhc.mutation.SetEventType(s)
	return rhc
}

// SetCommitID sets the "commit_id" field.
func (rhc *RetryHistoryCreate) SetCommitID(s string) *RetryHistoryCreate {
	rhc.mutation.SetCommitID(s)
	return rhc
}

// SetCommitter sets the "committer" field.
func (rhc *RetryHistoryCreate) SetCommitter(s string) *RetryHistoryCreate {
	rhc.mutation.SetCommitter(s)
	return rhc
}

// SetCommitMessage sets the "commit_message" field.
func (rhc *RetryHistoryCreate) SetCommitMessage(s string) *RetryHistoryCreate {
	rhc.mutation.SetCommitMessage(s)
	return rhc
}

// SetCommitURL sets the "commit_url" field.
func (rhc *RetryHistoryCreate) SetCommitURL(s string) *RetryHistoryCreate {
	rhc.mutation.SetCommitURL(s)
	return rhc
}

// SetPipelineName sets the "pipeline_name" field.
func (rhc *RetryHistoryCreate) SetPipelineName(s string) *RetryHistoryCreate {
	rhc.mutation.SetPipelineName(s)
	return rhc
}

// SetPipelineType sets the "pipeline_type" field.
func (rhc *RetryHistoryCreate) SetPipelineType(s string) *RetryHistoryCreate {
	rhc.mutation.SetPipelineType(s)
	return rhc
}

// SetID sets the "id" field.
func (rhc *RetryHistoryCreate) SetID(i int64) *RetryHistoryCreate {
	rhc.mutation.SetID(i)
	return rhc
}

// Mutation returns the RetryHistoryMutation object of the builder.
func (rhc *RetryHistoryCreate) Mutation() *RetryHistoryMutation {
	return rhc.mutation
}

// Save creates the RetryHistory in the database.
func (rhc *RetryHistoryCreate) Save(ctx context.Context) (*RetryHistory, error) {
	rhc.defaults()
	return withHooks(ctx, rhc.sqlSave, rhc.mutation, rhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rhc *RetryHistoryCreate) SaveX(ctx context.Context) *RetryHistory {
	v, err := rhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rhc *RetryHistoryCreate) Exec(ctx context.Context) error {
	_, err := rhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rhc *RetryHistoryCreate) ExecX(ctx context.Context) {
	if err := rhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rhc *RetryHistoryCreate) defaults() {
	if _, ok := rhc.mutation.CreatedAt(); !ok {
		v := retryhistory.DefaultCreatedAt()
		rhc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rhc *RetryHistoryCreate) check() error {
	if _, ok := rhc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RetryHistory.created_at"`)}
	}
	if _, ok := rhc.mutation.Env(); !ok {
		return &ValidationError{Name: "env", err: errors.New(`ent: missing required field "RetryHistory.env"`)}
	}
	if _, ok := rhc.mutation.Project(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required field "RetryHistory.project"`)}
	}
	if _, ok := rhc.mutation.ProjectURL(); !ok {
		return &ValidationError{Name: "project_url", err: errors.New(`ent: missing required field "RetryHistory.project_url"`)}
	}
	if _, ok := rhc.mutation.Ref(); !ok {
		return &ValidationError{Name: "ref", err: errors.New(`ent: missing required field "RetryHistory.ref"`)}
	}
	if _, ok := rhc.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "RetryHistory.event_type"`)}
	}
	if _, ok := rhc.mutation.CommitID(); !ok {
		return &ValidationError{Name: "commit_id", err: errors.New(`ent: missing required field "RetryHistory.commit_id"`)}
	}
	if _, ok := rhc.mutation.Committer(); !ok {
		return &ValidationError{Name: "committer", err: errors.New(`ent: missing required field "RetryHistory.committer"`)}
	}
	if _, ok := rhc.mutation.CommitMessage(); !ok {
		return &ValidationError{Name: "commit_message", err: errors.New(`ent: missing required field "RetryHistory.commit_message"`)}
	}
	if _, ok := rhc.mutation.CommitURL(); !ok {
		return &ValidationError{Name: "commit_url", err: errors.New(`ent: missing required field "RetryHistory.commit_url"`)}
	}
	if _, ok := rhc.mutation.PipelineName(); !ok {
		return &ValidationError{Name: "pipeline_name", err: errors.New(`ent: missing required field "RetryHistory.pipeline_name"`)}
	}
	if _, ok := rhc.mutation.PipelineType(); !ok {
		return &ValidationError{Name: "pipeline_type", err: errors.New(`ent: missing required field "RetryHistory.pipeline_type"`)}
	}
	return nil
}

func (rhc *RetryHistoryCreate) sqlSave(ctx context.Context) (*RetryHistory, error) {
	if err := rhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rhc.mutation.id = &_node.ID
	rhc.mutation.done = true
	return _node, nil
}

func (rhc *RetryHistoryCreate) createSpec() (*RetryHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &RetryHistory{config: rhc.config}
		_spec = sqlgraph.NewCreateSpec(retryhistory.Table, sqlgraph.NewFieldSpec(retryhistory.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = rhc.conflict
	if id, ok := rhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rhc.mutation.CreatedAt(); ok {
		_spec.SetField(retryhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rhc.mutation.Env(); ok {
		_spec.SetField(retryhistory.FieldEnv, field.TypeString, value)
		_node.Env = value
	}
	if value, ok := rhc.mutation.Project(); ok {
		_spec.SetField(retryhistory.FieldProject, field.TypeString, value)
		_node.Project = value
	}
	if value, ok := rhc.mutation.ProjectURL(); ok {
		_spec.SetField(retryhistory.FieldProjectURL, field.TypeString, value)
		_node.ProjectURL = value
	}
	if value, ok := rhc.mutation.Ref(); ok {
		_spec.SetField(retryhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := rhc.mutation.EventType(); ok {
		_spec.SetField(retryhistory.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := rhc.mutation.CommitID(); ok {
		_spec.SetField(retryhistory.FieldCommitID, field.TypeString, value)
		_node.CommitID = value
	}
	if value, ok := rhc.mutation.Committer(); ok {
		_spec.SetField(retryhistory.FieldCommitter, field.TypeString, value)
		_node.Committer = value
	}
	if value, ok := rhc.mutation.CommitMessage(); ok {
		_spec.SetField(retryhistory.FieldCommitMessage, field.TypeString, value)
		_node.CommitMessage = value
	}
	if value, ok := rhc.mutation.CommitURL(); ok {
		_spec.SetField(retryhistory.FieldCommitURL, field.TypeString, value)
		_node.CommitURL = value
	}
	if value, ok := rhc.mutation.PipelineName(); ok {
		_spec.SetField(retryhistory.FieldPipelineName, field.TypeString, value)
		_node.PipelineName = value
	}
	if value, ok := rhc.mutation.PipelineType(); ok {
		_spec.SetField(retryhistory.FieldPipelineType, field.TypeString, value)
		_node.PipelineType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RetryHistory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RetryHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rhc *RetryHistoryCreate) OnConflict(opts ...sql.ConflictOption) *RetryHistoryUpsertOne {
	rhc.conflict = opts
	return &RetryHistoryUpsertOne{
		create: rhc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RetryHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rhc *RetryHistoryCreate) OnConflictColumns(columns ...string) *RetryHistoryUpsertOne {
	rhc.conflict = append(rhc.conflict, sql.ConflictColumns(columns...))
	return &RetryHistoryUpsertOne{
		create: rhc,
	}
}

type (
	// RetryHistoryUpsertOne is the builder for "upsert"-ing
	//  one RetryHistory node.
	RetryHistoryUpsertOne struct {
		create *RetryHistoryCreate
	}

	// RetryHistoryUpsert is the "OnConflict" setter.
	RetryHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *RetryHistoryUpsert) SetCreatedAt(v time.Time) *RetryHistoryUpsert {
	u.Set(retryhistory.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RetryHistoryUpsert) UpdateCreatedAt() *RetryHistoryUpsert {
	u.SetExcluded(retryhistory.FieldCreatedAt)
	return u
}

// SetEnv sets the "env" field.
func (u *RetryHistoryUpsert) SetEnv(v string) *RetryHistoryUpsert {
	u.Set(retryhistory.FieldEnv, v)
	return u
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *RetryHistoryUpsert) UpdateEnv() *RetryHistoryUpsert {
	u.SetExcluded(retryhistory.FieldEnv)
	return u
}

// SetProject sets the "project" field.
func (u *RetryHistoryUpsert) SetProject(v string) *RetryHistoryUpsert {
	u.Set(retryhistory.FieldProject, v)
	return u
}

// UpdateProject sets the "project" field to the value that was provided on create.
func (u *RetryHistoryUpsert) UpdateProject() *RetryHistoryUpsert {
	u.SetExcluded(retryhistory.FieldProject)
	return u
}

// SetProjectURL sets the "project_url" field.
func (u *RetryHistoryUpsert) SetProjectURL(v string) *RetryHistoryUpsert {
	u.Set(retryhistory.FieldProjectURL, v)
	return u
}

// UpdateProjectURL sets the "project_url" field to the value that was provided on create.
func (u *RetryHistoryUpsert) UpdateProjectURL() *RetryHistoryUpsert {
	u.SetExcluded(retryhistory.FieldProjectURL)
	return u
}

// SetRef sets the "ref" field.
func (u *RetryHistoryUpsert) SetRef(v string) *RetryHistoryUpsert {
	u.Set(retryhistory.FieldRef, v)
	return u
}

// UpdateRef sets the "ref" field to the value that was provided on create.
func (u *RetryHistoryUpsert) UpdateRef() *RetryHistoryUpsert {
	u.SetExcluded(retryhistory.FieldRef)
	return u
}

// SetEventType sets the "event_type" field.
func (u *RetryHistoryUpsert) SetEventType(v string) *RetryHistoryUpsert {
	u.Set(retryhistory.FieldEventType, v)
	return u
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *RetryHistoryUpsert) UpdateEventType() *RetryHistoryUpsert {
	u.SetExcluded(retryhistory.FieldEventType)
	return u
}

// SetCommitID sets the "commit_id" field.
func (u *RetryHistoryUpsert) SetCommitID(v string) *RetryHistoryUpsert {
	u.Set(retryhistory.FieldCommitID, v)
	return u
}

// UpdateCommitID sets the "commit_id" field to the value that was provided on create.
func (u *RetryHistoryUpsert) UpdateCommitID() *RetryHistoryUpsert {
	u.SetExcluded(retryhistory.FieldCommitID)
	return u
}

// SetCommitter sets the "committer" field.
func (u *RetryHistoryUpsert) SetCommitter(v string) *RetryHistoryUpsert {
	u.Set(retryhistory.FieldCommitter, v)
	return u
}

// UpdateCommitter sets the "committer" field to the value that was provided on create.
func (u *RetryHistoryUpsert) UpdateCommitter() *RetryHistoryUpsert {
	u.SetExcluded(retryhistory.FieldCommitter)
	return u
}

// SetCommitMessage sets the "commit_message" field.
func (u *RetryHistoryUpsert) SetCommitMessage(v string) *RetryHistoryUpsert {
	u.Set(retryhistory.FieldCommitMessage, v)
	return u
}

// UpdateCommitMessage sets the "commit_message" field to the value that was provided on create.
func (u *RetryHistoryUpsert) UpdateCommitMessage() *RetryHistoryUpsert {
	u.SetExcluded(retryhistory.FieldCommitMessage)
	return u
}

// SetCommitURL sets the "commit_url" field.
func (u *RetryHistoryUpsert) SetCommitURL(v string) *RetryHistoryUpsert {
	u.Set(retryhistory.FieldCommitURL, v)
	return u
}

// UpdateCommitURL sets the "commit_url" field to the value that was provided on create.
func (u *RetryHistoryUpsert) UpdateCommitURL() *RetryHistoryUpsert {
	u.SetExcluded(retryhistory.FieldCommitURL)
	return u
}

// SetPipelineName sets the "pipeline_name" field.
func (u *RetryHistoryUpsert) SetPipelineName(v string) *RetryHistoryUpsert {
	u.Set(retryhistory.FieldPipelineName, v)
	return u
}

// UpdatePipelineName sets the "pipeline_name" field to the value that was provided on create.
func (u *RetryHistoryUpsert) UpdatePipelineName() *RetryHistoryUpsert {
	u.SetExcluded(retryhistory.FieldPipelineName)
	return u
}

// SetPipelineType sets the "pipeline_type" field.
func (u *RetryHistoryUpsert) SetPipelineType(v string) *RetryHistoryUpsert {
	u.Set(retryhistory.FieldPipelineType, v)
	return u
}

// UpdatePipelineType sets the "pipeline_type" field to the value that was provided on create.
func (u *RetryHistoryUpsert) UpdatePipelineType() *RetryHistoryUpsert {
	u.SetExcluded(retryhistory.FieldPipelineType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RetryHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(retryhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RetryHistoryUpsertOne) UpdateNewValues() *RetryHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(retryhistory.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RetryHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RetryHistoryUpsertOne) Ignore() *RetryHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RetryHistoryUpsertOne) DoNothing() *RetryHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RetryHistoryCreate.OnConflict
// documentation for more info.
func (u *RetryHistoryUpsertOne) Update(set func(*RetryHistoryUpsert)) *RetryHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RetryHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RetryHistoryUpsertOne) SetCreatedAt(v time.Time) *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RetryHistoryUpsertOne) UpdateCreatedAt() *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetEnv sets the "env" field.
func (u *RetryHistoryUpsertOne) SetEnv(v string) *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetEnv(v)
	})
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *RetryHistoryUpsertOne) UpdateEnv() *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateEnv()
	})
}

// SetProject sets the "project" field.
func (u *RetryHistoryUpsertOne) SetProject(v string) *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetProject(v)
	})
}

// UpdateProject sets the "project" field to the value that was provided on create.
func (u *RetryHistoryUpsertOne) UpdateProject() *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateProject()
	})
}

// SetProjectURL sets the "project_url" field.
func (u *RetryHistoryUpsertOne) SetProjectURL(v string) *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetProjectURL(v)
	})
}

// UpdateProjectURL sets the "project_url" field to the value that was provided on create.
func (u *RetryHistoryUpsertOne) UpdateProjectURL() *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateProjectURL()
	})
}

// SetRef sets the "ref" field.
func (u *RetryHistoryUpsertOne) SetRef(v string) *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetRef(v)
	})
}

// UpdateRef sets the "ref" field to the value that was provided on create.
func (u *RetryHistoryUpsertOne) UpdateRef() *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateRef()
	})
}

// SetEventType sets the "event_type" field.
func (u *RetryHistoryUpsertOne) SetEventType(v string) *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *RetryHistoryUpsertOne) UpdateEventType() *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateEventType()
	})
}

// SetCommitID sets the "commit_id" field.
func (u *RetryHistoryUpsertOne) SetCommitID(v string) *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetCommitID(v)
	})
}

// UpdateCommitID sets the "commit_id" field to the value that was provided on create.
func (u *RetryHistoryUpsertOne) UpdateCommitID() *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateCommitID()
	})
}

// SetCommitter sets the "committer" field.
func (u *RetryHistoryUpsertOne) SetCommitter(v string) *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetCommitter(v)
	})
}

// UpdateCommitter sets the "committer" field to the value that was provided on create.
func (u *RetryHistoryUpsertOne) UpdateCommitter() *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateCommitter()
	})
}

// SetCommitMessage sets the "commit_message" field.
func (u *RetryHistoryUpsertOne) SetCommitMessage(v string) *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetCommitMessage(v)
	})
}

// UpdateCommitMessage sets the "commit_message" field to the value that was provided on create.
func (u *RetryHistoryUpsertOne) UpdateCommitMessage() *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateCommitMessage()
	})
}

// SetCommitURL sets the "commit_url" field.
func (u *RetryHistoryUpsertOne) SetCommitURL(v string) *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetCommitURL(v)
	})
}

// UpdateCommitURL sets the "commit_url" field to the value that was provided on create.
func (u *RetryHistoryUpsertOne) UpdateCommitURL() *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateCommitURL()
	})
}

// SetPipelineName sets the "pipeline_name" field.
func (u *RetryHistoryUpsertOne) SetPipelineName(v string) *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetPipelineName(v)
	})
}

// UpdatePipelineName sets the "pipeline_name" field to the value that was provided on create.
func (u *RetryHistoryUpsertOne) UpdatePipelineName() *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdatePipelineName()
	})
}

// SetPipelineType sets the "pipeline_type" field.
func (u *RetryHistoryUpsertOne) SetPipelineType(v string) *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetPipelineType(v)
	})
}

// UpdatePipelineType sets the "pipeline_type" field to the value that was provided on create.
func (u *RetryHistoryUpsertOne) UpdatePipelineType() *RetryHistoryUpsertOne {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdatePipelineType()
	})
}

// Exec executes the query.
func (u *RetryHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RetryHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RetryHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RetryHistoryUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RetryHistoryUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RetryHistoryCreateBulk is the builder for creating many RetryHistory entities in bulk.
type RetryHistoryCreateBulk struct {
	config
	err      error
	builders []*RetryHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the RetryHistory entities in the database.
func (rhcb *RetryHistoryCreateBulk) Save(ctx context.Context) ([]*RetryHistory, error) {
	if rhcb.err != nil {
		return nil, rhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rhcb.builders))
	nodes := make([]*RetryHistory, len(rhcb.builders))
	mutators := make([]Mutator, len(rhcb.builders))
	for i := range rhcb.builders {
		func(i int, root context.Context) {
			builder := rhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RetryHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rhcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rhcb *RetryHistoryCreateBulk) SaveX(ctx context.Context) []*RetryHistory {
	v, err := rhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rhcb *RetryHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := rhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rhcb *RetryHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := rhcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RetryHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RetryHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rhcb *RetryHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *RetryHistoryUpsertBulk {
	rhcb.conflict = opts
	return &RetryHistoryUpsertBulk{
		create: rhcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RetryHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rhcb *RetryHistoryCreateBulk) OnConflictColumns(columns ...string) *RetryHistoryUpsertBulk {
	rhcb.conflict = append(rhcb.conflict, sql.ConflictColumns(columns...))
	return &RetryHistoryUpsertBulk{
		create: rhcb,
	}
}

// RetryHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of RetryHistory nodes.
type RetryHistoryUpsertBulk struct {
	create *RetryHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RetryHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(retryhistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RetryHistoryUpsertBulk) UpdateNewValues() *RetryHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(retryhistory.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RetryHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RetryHistoryUpsertBulk) Ignore() *RetryHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RetryHistoryUpsertBulk) DoNothing() *RetryHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RetryHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *RetryHistoryUpsertBulk) Update(set func(*RetryHistoryUpsert)) *RetryHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RetryHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RetryHistoryUpsertBulk) SetCreatedAt(v time.Time) *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RetryHistoryUpsertBulk) UpdateCreatedAt() *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetEnv sets the "env" field.
func (u *RetryHistoryUpsertBulk) SetEnv(v string) *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetEnv(v)
	})
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *RetryHistoryUpsertBulk) UpdateEnv() *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateEnv()
	})
}

// SetProject sets the "project" field.
func (u *RetryHistoryUpsertBulk) SetProject(v string) *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetProject(v)
	})
}

// UpdateProject sets the "project" field to the value that was provided on create.
func (u *RetryHistoryUpsertBulk) UpdateProject() *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateProject()
	})
}

// SetProjectURL sets the "project_url" field.
func (u *RetryHistoryUpsertBulk) SetProjectURL(v string) *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetProjectURL(v)
	})
}

// UpdateProjectURL sets the "project_url" field to the value that was provided on create.
func (u *RetryHistoryUpsertBulk) UpdateProjectURL() *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateProjectURL()
	})
}

// SetRef sets the "ref" field.
func (u *RetryHistoryUpsertBulk) SetRef(v string) *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetRef(v)
	})
}

// UpdateRef sets the "ref" field to the value that was provided on create.
func (u *RetryHistoryUpsertBulk) UpdateRef() *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateRef()
	})
}

// SetEventType sets the "event_type" field.
func (u *RetryHistoryUpsertBulk) SetEventType(v string) *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *RetryHistoryUpsertBulk) UpdateEventType() *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateEventType()
	})
}

// SetCommitID sets the "commit_id" field.
func (u *RetryHistoryUpsertBulk) SetCommitID(v string) *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetCommitID(v)
	})
}

// UpdateCommitID sets the "commit_id" field to the value that was provided on create.
func (u *RetryHistoryUpsertBulk) UpdateCommitID() *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateCommitID()
	})
}

// SetCommitter sets the "committer" field.
func (u *RetryHistoryUpsertBulk) SetCommitter(v string) *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetCommitter(v)
	})
}

// UpdateCommitter sets the "committer" field to the value that was provided on create.
func (u *RetryHistoryUpsertBulk) UpdateCommitter() *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateCommitter()
	})
}

// SetCommitMessage sets the "commit_message" field.
func (u *RetryHistoryUpsertBulk) SetCommitMessage(v string) *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetCommitMessage(v)
	})
}

// UpdateCommitMessage sets the "commit_message" field to the value that was provided on create.
func (u *RetryHistoryUpsertBulk) UpdateCommitMessage() *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateCommitMessage()
	})
}

// SetCommitURL sets the "commit_url" field.
func (u *RetryHistoryUpsertBulk) SetCommitURL(v string) *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetCommitURL(v)
	})
}

// UpdateCommitURL sets the "commit_url" field to the value that was provided on create.
func (u *RetryHistoryUpsertBulk) UpdateCommitURL() *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdateCommitURL()
	})
}

// SetPipelineName sets the "pipeline_name" field.
func (u *RetryHistoryUpsertBulk) SetPipelineName(v string) *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetPipelineName(v)
	})
}

// UpdatePipelineName sets the "pipeline_name" field to the value that was provided on create.
func (u *RetryHistoryUpsertBulk) UpdatePipelineName() *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdatePipelineName()
	})
}

// SetPipelineType sets the "pipeline_type" field.
func (u *RetryHistoryUpsertBulk) SetPipelineType(v string) *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.SetPipelineType(v)
	})
}

// UpdatePipelineType sets the "pipeline_type" field to the value that was provided on create.
func (u *RetryHistoryUpsertBulk) UpdatePipelineType() *RetryHistoryUpsertBulk {
	return u.Update(func(s *RetryHistoryUpsert) {
		s.UpdatePipelineType()
	})
}

// Exec executes the query.
func (u *RetryHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RetryHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RetryHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RetryHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
