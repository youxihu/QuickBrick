// Code generated by ent, DO NOT EDIT.

package ent

import (
	"QuickBrick/internal/domain/ent/predicate"
	"QuickBrick/internal/domain/ent/retryhistory"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RetryHistoryUpdate is the builder for updating RetryHistory entities.
type RetryHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *RetryHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RetryHistoryUpdate builder.
func (rhu *RetryHistoryUpdate) Where(ps ...predicate.RetryHistory) *RetryHistoryUpdate {
	rhu.mutation.Where(ps...)
	return rhu
}

// SetCreatedAt sets the "created_at" field.
func (rhu *RetryHistoryUpdate) SetCreatedAt(t time.Time) *RetryHistoryUpdate {
	rhu.mutation.SetCreatedAt(t)
	return rhu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rhu *RetryHistoryUpdate) SetNillableCreatedAt(t *time.Time) *RetryHistoryUpdate {
	if t != nil {
		rhu.SetCreatedAt(*t)
	}
	return rhu
}

// SetEnv sets the "env" field.
func (rhu *RetryHistoryUpdate) SetEnv(s string) *RetryHistoryUpdate {
	rhu.mutation.SetEnv(s)
	return rhu
}

// SetNillableEnv sets the "env" field if the given value is not nil.
func (rhu *RetryHistoryUpdate) SetNillableEnv(s *string) *RetryHistoryUpdate {
	if s != nil {
		rhu.SetEnv(*s)
	}
	return rhu
}

// SetProject sets the "project" field.
func (rhu *RetryHistoryUpdate) SetProject(s string) *RetryHistoryUpdate {
	rhu.mutation.SetProject(s)
	return rhu
}

// SetNillableProject sets the "project" field if the given value is not nil.
func (rhu *RetryHistoryUpdate) SetNillableProject(s *string) *RetryHistoryUpdate {
	if s != nil {
		rhu.SetProject(*s)
	}
	return rhu
}

// SetProjectURL sets the "project_url" field.
func (rhu *RetryHistoryUpdate) SetProjectURL(s string) *RetryHistoryUpdate {
	rhu.mutation.SetProjectURL(s)
	return rhu
}

// SetNillableProjectURL sets the "project_url" field if the given value is not nil.
func (rhu *RetryHistoryUpdate) SetNillableProjectURL(s *string) *RetryHistoryUpdate {
	if s != nil {
		rhu.SetProjectURL(*s)
	}
	return rhu
}

// SetRef sets the "ref" field.
func (rhu *RetryHistoryUpdate) SetRef(s string) *RetryHistoryUpdate {
	rhu.mutation.SetRef(s)
	return rhu
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (rhu *RetryHistoryUpdate) SetNillableRef(s *string) *RetryHistoryUpdate {
	if s != nil {
		rhu.SetRef(*s)
	}
	return rhu
}

// SetEventType sets the "event_type" field.
func (rhu *RetryHistoryUpdate) SetEventType(s string) *RetryHistoryUpdate {
	rhu.mutation.SetEventType(s)
	return rhu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (rhu *RetryHistoryUpdate) SetNillableEventType(s *string) *RetryHistoryUpdate {
	if s != nil {
		rhu.SetEventType(*s)
	}
	return rhu
}

// SetCommitID sets the "commit_id" field.
func (rhu *RetryHistoryUpdate) SetCommitID(s string) *RetryHistoryUpdate {
	rhu.mutation.SetCommitID(s)
	return rhu
}

// SetNillableCommitID sets the "commit_id" field if the given value is not nil.
func (rhu *RetryHistoryUpdate) SetNillableCommitID(s *string) *RetryHistoryUpdate {
	if s != nil {
		rhu.SetCommitID(*s)
	}
	return rhu
}

// SetCommitter sets the "committer" field.
func (rhu *RetryHistoryUpdate) SetCommitter(s string) *RetryHistoryUpdate {
	rhu.mutation.SetCommitter(s)
	return rhu
}

// SetNillableCommitter sets the "committer" field if the given value is not nil.
func (rhu *RetryHistoryUpdate) SetNillableCommitter(s *string) *RetryHistoryUpdate {
	if s != nil {
		rhu.SetCommitter(*s)
	}
	return rhu
}

// SetCommitMessage sets the "commit_message" field.
func (rhu *RetryHistoryUpdate) SetCommitMessage(s string) *RetryHistoryUpdate {
	rhu.mutation.SetCommitMessage(s)
	return rhu
}

// SetNillableCommitMessage sets the "commit_message" field if the given value is not nil.
func (rhu *RetryHistoryUpdate) SetNillableCommitMessage(s *string) *RetryHistoryUpdate {
	if s != nil {
		rhu.SetCommitMessage(*s)
	}
	return rhu
}

// SetCommitURL sets the "commit_url" field.
func (rhu *RetryHistoryUpdate) SetCommitURL(s string) *RetryHistoryUpdate {
	rhu.mutation.SetCommitURL(s)
	return rhu
}

// SetNillableCommitURL sets the "commit_url" field if the given value is not nil.
func (rhu *RetryHistoryUpdate) SetNillableCommitURL(s *string) *RetryHistoryUpdate {
	if s != nil {
		rhu.SetCommitURL(*s)
	}
	return rhu
}

// SetPipelineName sets the "pipeline_name" field.
func (rhu *RetryHistoryUpdate) SetPipelineName(s string) *RetryHistoryUpdate {
	rhu.mutation.SetPipelineName(s)
	return rhu
}

// SetNillablePipelineName sets the "pipeline_name" field if the given value is not nil.
func (rhu *RetryHistoryUpdate) SetNillablePipelineName(s *string) *RetryHistoryUpdate {
	if s != nil {
		rhu.SetPipelineName(*s)
	}
	return rhu
}

// SetPipelineType sets the "pipeline_type" field.
func (rhu *RetryHistoryUpdate) SetPipelineType(s string) *RetryHistoryUpdate {
	rhu.mutation.SetPipelineType(s)
	return rhu
}

// SetNillablePipelineType sets the "pipeline_type" field if the given value is not nil.
func (rhu *RetryHistoryUpdate) SetNillablePipelineType(s *string) *RetryHistoryUpdate {
	if s != nil {
		rhu.SetPipelineType(*s)
	}
	return rhu
}

// Mutation returns the RetryHistoryMutation object of the builder.
func (rhu *RetryHistoryUpdate) Mutation() *RetryHistoryMutation {
	return rhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rhu *RetryHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rhu.sqlSave, rhu.mutation, rhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rhu *RetryHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := rhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rhu *RetryHistoryUpdate) Exec(ctx context.Context) error {
	_, err := rhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rhu *RetryHistoryUpdate) ExecX(ctx context.Context) {
	if err := rhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rhu *RetryHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RetryHistoryUpdate {
	rhu.modifiers = append(rhu.modifiers, modifiers...)
	return rhu
}

func (rhu *RetryHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(retryhistory.Table, retryhistory.Columns, sqlgraph.NewFieldSpec(retryhistory.FieldID, field.TypeInt64))
	if ps := rhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rhu.mutation.CreatedAt(); ok {
		_spec.SetField(retryhistory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rhu.mutation.Env(); ok {
		_spec.SetField(retryhistory.FieldEnv, field.TypeString, value)
	}
	if value, ok := rhu.mutation.Project(); ok {
		_spec.SetField(retryhistory.FieldProject, field.TypeString, value)
	}
	if value, ok := rhu.mutation.ProjectURL(); ok {
		_spec.SetField(retryhistory.FieldProjectURL, field.TypeString, value)
	}
	if value, ok := rhu.mutation.Ref(); ok {
		_spec.SetField(retryhistory.FieldRef, field.TypeString, value)
	}
	if value, ok := rhu.mutation.EventType(); ok {
		_spec.SetField(retryhistory.FieldEventType, field.TypeString, value)
	}
	if value, ok := rhu.mutation.CommitID(); ok {
		_spec.SetField(retryhistory.FieldCommitID, field.TypeString, value)
	}
	if value, ok := rhu.mutation.Committer(); ok {
		_spec.SetField(retryhistory.FieldCommitter, field.TypeString, value)
	}
	if value, ok := rhu.mutation.CommitMessage(); ok {
		_spec.SetField(retryhistory.FieldCommitMessage, field.TypeString, value)
	}
	if value, ok := rhu.mutation.CommitURL(); ok {
		_spec.SetField(retryhistory.FieldCommitURL, field.TypeString, value)
	}
	if value, ok := rhu.mutation.PipelineName(); ok {
		_spec.SetField(retryhistory.FieldPipelineName, field.TypeString, value)
	}
	if value, ok := rhu.mutation.PipelineType(); ok {
		_spec.SetField(retryhistory.FieldPipelineType, field.TypeString, value)
	}
	_spec.AddModifiers(rhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retryhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rhu.mutation.done = true
	return n, nil
}

// RetryHistoryUpdateOne is the builder for updating a single RetryHistory entity.
type RetryHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RetryHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (rhuo *RetryHistoryUpdateOne) SetCreatedAt(t time.Time) *RetryHistoryUpdateOne {
	rhuo.mutation.SetCreatedAt(t)
	return rhuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rhuo *RetryHistoryUpdateOne) SetNillableCreatedAt(t *time.Time) *RetryHistoryUpdateOne {
	if t != nil {
		rhuo.SetCreatedAt(*t)
	}
	return rhuo
}

// SetEnv sets the "env" field.
func (rhuo *RetryHistoryUpdateOne) SetEnv(s string) *RetryHistoryUpdateOne {
	rhuo.mutation.SetEnv(s)
	return rhuo
}

// SetNillableEnv sets the "env" field if the given value is not nil.
func (rhuo *RetryHistoryUpdateOne) SetNillableEnv(s *string) *RetryHistoryUpdateOne {
	if s != nil {
		rhuo.SetEnv(*s)
	}
	return rhuo
}

// SetProject sets the "project" field.
func (rhuo *RetryHistoryUpdateOne) SetProject(s string) *RetryHistoryUpdateOne {
	rhuo.mutation.SetProject(s)
	return rhuo
}

// SetNillableProject sets the "project" field if the given value is not nil.
func (rhuo *RetryHistoryUpdateOne) SetNillableProject(s *string) *RetryHistoryUpdateOne {
	if s != nil {
		rhuo.SetProject(*s)
	}
	return rhuo
}

// SetProjectURL sets the "project_url" field.
func (rhuo *RetryHistoryUpdateOne) SetProjectURL(s string) *RetryHistoryUpdateOne {
	rhuo.mutation.SetProjectURL(s)
	return rhuo
}

// SetNillableProjectURL sets the "project_url" field if the given value is not nil.
func (rhuo *RetryHistoryUpdateOne) SetNillableProjectURL(s *string) *RetryHistoryUpdateOne {
	if s != nil {
		rhuo.SetProjectURL(*s)
	}
	return rhuo
}

// SetRef sets the "ref" field.
func (rhuo *RetryHistoryUpdateOne) SetRef(s string) *RetryHistoryUpdateOne {
	rhuo.mutation.SetRef(s)
	return rhuo
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (rhuo *RetryHistoryUpdateOne) SetNillableRef(s *string) *RetryHistoryUpdateOne {
	if s != nil {
		rhuo.SetRef(*s)
	}
	return rhuo
}

// SetEventType sets the "event_type" field.
func (rhuo *RetryHistoryUpdateOne) SetEventType(s string) *RetryHistoryUpdateOne {
	rhuo.mutation.SetEventType(s)
	return rhuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (rhuo *RetryHistoryUpdateOne) SetNillableEventType(s *string) *RetryHistoryUpdateOne {
	if s != nil {
		rhuo.SetEventType(*s)
	}
	return rhuo
}

// SetCommitID sets the "commit_id" field.
func (rhuo *RetryHistoryUpdateOne) SetCommitID(s string) *RetryHistoryUpdateOne {
	rhuo.mutation.SetCommitID(s)
	return rhuo
}

// SetNillableCommitID sets the "commit_id" field if the given value is not nil.
func (rhuo *RetryHistoryUpdateOne) SetNillableCommitID(s *string) *RetryHistoryUpdateOne {
	if s != nil {
		rhuo.SetCommitID(*s)
	}
	return rhuo
}

// SetCommitter sets the "committer" field.
func (rhuo *RetryHistoryUpdateOne) SetCommitter(s string) *RetryHistoryUpdateOne {
	rhuo.mutation.SetCommitter(s)
	return rhuo
}

// SetNillableCommitter sets the "committer" field if the given value is not nil.
func (rhuo *RetryHistoryUpdateOne) SetNillableCommitter(s *string) *RetryHistoryUpdateOne {
	if s != nil {
		rhuo.SetCommitter(*s)
	}
	return rhuo
}

// SetCommitMessage sets the "commit_message" field.
func (rhuo *RetryHistoryUpdateOne) SetCommitMessage(s string) *RetryHistoryUpdateOne {
	rhuo.mutation.SetCommitMessage(s)
	return rhuo
}

// SetNillableCommitMessage sets the "commit_message" field if the given value is not nil.
func (rhuo *RetryHistoryUpdateOne) SetNillableCommitMessage(s *string) *RetryHistoryUpdateOne {
	if s != nil {
		rhuo.SetCommitMessage(*s)
	}
	return rhuo
}

// SetCommitURL sets the "commit_url" field.
func (rhuo *RetryHistoryUpdateOne) SetCommitURL(s string) *RetryHistoryUpdateOne {
	rhuo.mutation.SetCommitURL(s)
	return rhuo
}

// SetNillableCommitURL sets the "commit_url" field if the given value is not nil.
func (rhuo *RetryHistoryUpdateOne) SetNillableCommitURL(s *string) *RetryHistoryUpdateOne {
	if s != nil {
		rhuo.SetCommitURL(*s)
	}
	return rhuo
}

// SetPipelineName sets the "pipeline_name" field.
func (rhuo *RetryHistoryUpdateOne) SetPipelineName(s string) *RetryHistoryUpdateOne {
	rhuo.mutation.SetPipelineName(s)
	return rhuo
}

// SetNillablePipelineName sets the "pipeline_name" field if the given value is not nil.
func (rhuo *RetryHistoryUpdateOne) SetNillablePipelineName(s *string) *RetryHistoryUpdateOne {
	if s != nil {
		rhuo.SetPipelineName(*s)
	}
	return rhuo
}

// SetPipelineType sets the "pipeline_type" field.
func (rhuo *RetryHistoryUpdateOne) SetPipelineType(s string) *RetryHistoryUpdateOne {
	rhuo.mutation.SetPipelineType(s)
	return rhuo
}

// SetNillablePipelineType sets the "pipeline_type" field if the given value is not nil.
func (rhuo *RetryHistoryUpdateOne) SetNillablePipelineType(s *string) *RetryHistoryUpdateOne {
	if s != nil {
		rhuo.SetPipelineType(*s)
	}
	return rhuo
}

// Mutation returns the RetryHistoryMutation object of the builder.
func (rhuo *RetryHistoryUpdateOne) Mutation() *RetryHistoryMutation {
	return rhuo.mutation
}

// Where appends a list predicates to the RetryHistoryUpdate builder.
func (rhuo *RetryHistoryUpdateOne) Where(ps ...predicate.RetryHistory) *RetryHistoryUpdateOne {
	rhuo.mutation.Where(ps...)
	return rhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rhuo *RetryHistoryUpdateOne) Select(field string, fields ...string) *RetryHistoryUpdateOne {
	rhuo.fields = append([]string{field}, fields...)
	return rhuo
}

// Save executes the query and returns the updated RetryHistory entity.
func (rhuo *RetryHistoryUpdateOne) Save(ctx context.Context) (*RetryHistory, error) {
	return withHooks(ctx, rhuo.sqlSave, rhuo.mutation, rhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rhuo *RetryHistoryUpdateOne) SaveX(ctx context.Context) *RetryHistory {
	node, err := rhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rhuo *RetryHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := rhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rhuo *RetryHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := rhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rhuo *RetryHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RetryHistoryUpdateOne {
	rhuo.modifiers = append(rhuo.modifiers, modifiers...)
	return rhuo
}

func (rhuo *RetryHistoryUpdateOne) sqlSave(ctx context.Context) (_node *RetryHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(retryhistory.Table, retryhistory.Columns, sqlgraph.NewFieldSpec(retryhistory.FieldID, field.TypeInt64))
	id, ok := rhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RetryHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, retryhistory.FieldID)
		for _, f := range fields {
			if !retryhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != retryhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rhuo.mutation.CreatedAt(); ok {
		_spec.SetField(retryhistory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rhuo.mutation.Env(); ok {
		_spec.SetField(retryhistory.FieldEnv, field.TypeString, value)
	}
	if value, ok := rhuo.mutation.Project(); ok {
		_spec.SetField(retryhistory.FieldProject, field.TypeString, value)
	}
	if value, ok := rhuo.mutation.ProjectURL(); ok {
		_spec.SetField(retryhistory.FieldProjectURL, field.TypeString, value)
	}
	if value, ok := rhuo.mutation.Ref(); ok {
		_spec.SetField(retryhistory.FieldRef, field.TypeString, value)
	}
	if value, ok := rhuo.mutation.EventType(); ok {
		_spec.SetField(retryhistory.FieldEventType, field.TypeString, value)
	}
	if value, ok := rhuo.mutation.CommitID(); ok {
		_spec.SetField(retryhistory.FieldCommitID, field.TypeString, value)
	}
	if value, ok := rhuo.mutation.Committer(); ok {
		_spec.SetField(retryhistory.FieldCommitter, field.TypeString, value)
	}
	if value, ok := rhuo.mutation.CommitMessage(); ok {
		_spec.SetField(retryhistory.FieldCommitMessage, field.TypeString, value)
	}
	if value, ok := rhuo.mutation.CommitURL(); ok {
		_spec.SetField(retryhistory.FieldCommitURL, field.TypeString, value)
	}
	if value, ok := rhuo.mutation.PipelineName(); ok {
		_spec.SetField(retryhistory.FieldPipelineName, field.TypeString, value)
	}
	if value, ok := rhuo.mutation.PipelineType(); ok {
		_spec.SetField(retryhistory.FieldPipelineType, field.TypeString, value)
	}
	_spec.AddModifiers(rhuo.modifiers...)
	_node = &RetryHistory{config: rhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retryhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rhuo.mutation.done = true
	return _node, nil
}
