// Code generated by ent, DO NOT EDIT.

package ent

import (
	"QuickBrick/internal/domain/ent/pipelineexecutionlog"
	"QuickBrick/internal/domain/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePipelineExecutionLog = "PipelineExecutionLog"
)

// PipelineExecutionLogMutation represents an operation that mutates the PipelineExecutionLog nodes in the graph.
type PipelineExecutionLogMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	env            *string
	_type          *string
	event_type     *string
	pipeline_name  *string
	username_email *string
	commit_id      *string
	project_url    *string
	status         *string
	created_at     *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*PipelineExecutionLog, error)
	predicates     []predicate.PipelineExecutionLog
}

var _ ent.Mutation = (*PipelineExecutionLogMutation)(nil)

// pipelineexecutionlogOption allows management of the mutation configuration using functional options.
type pipelineexecutionlogOption func(*PipelineExecutionLogMutation)

// newPipelineExecutionLogMutation creates new mutation for the PipelineExecutionLog entity.
func newPipelineExecutionLogMutation(c config, op Op, opts ...pipelineexecutionlogOption) *PipelineExecutionLogMutation {
	m := &PipelineExecutionLogMutation{
		config:        c,
		op:            op,
		typ:           TypePipelineExecutionLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPipelineExecutionLogID sets the ID field of the mutation.
func withPipelineExecutionLogID(id int64) pipelineexecutionlogOption {
	return func(m *PipelineExecutionLogMutation) {
		var (
			err   error
			once  sync.Once
			value *PipelineExecutionLog
		)
		m.oldValue = func(ctx context.Context) (*PipelineExecutionLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PipelineExecutionLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPipelineExecutionLog sets the old PipelineExecutionLog of the mutation.
func withPipelineExecutionLog(node *PipelineExecutionLog) pipelineexecutionlogOption {
	return func(m *PipelineExecutionLogMutation) {
		m.oldValue = func(context.Context) (*PipelineExecutionLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PipelineExecutionLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PipelineExecutionLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PipelineExecutionLog entities.
func (m *PipelineExecutionLogMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PipelineExecutionLogMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PipelineExecutionLogMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PipelineExecutionLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEnv sets the "env" field.
func (m *PipelineExecutionLogMutation) SetEnv(s string) {
	m.env = &s
}

// Env returns the value of the "env" field in the mutation.
func (m *PipelineExecutionLogMutation) Env() (r string, exists bool) {
	v := m.env
	if v == nil {
		return
	}
	return *v, true
}

// OldEnv returns the old "env" field's value of the PipelineExecutionLog entity.
// If the PipelineExecutionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PipelineExecutionLogMutation) OldEnv(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnv is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnv requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnv: %w", err)
	}
	return oldValue.Env, nil
}

// ResetEnv resets all changes to the "env" field.
func (m *PipelineExecutionLogMutation) ResetEnv() {
	m.env = nil
}

// SetType sets the "type" field.
func (m *PipelineExecutionLogMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *PipelineExecutionLogMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the PipelineExecutionLog entity.
// If the PipelineExecutionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PipelineExecutionLogMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *PipelineExecutionLogMutation) ResetType() {
	m._type = nil
}

// SetEventType sets the "event_type" field.
func (m *PipelineExecutionLogMutation) SetEventType(s string) {
	m.event_type = &s
}

// EventType returns the value of the "event_type" field in the mutation.
func (m *PipelineExecutionLogMutation) EventType() (r string, exists bool) {
	v := m.event_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEventType returns the old "event_type" field's value of the PipelineExecutionLog entity.
// If the PipelineExecutionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PipelineExecutionLogMutation) OldEventType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventType: %w", err)
	}
	return oldValue.EventType, nil
}

// ResetEventType resets all changes to the "event_type" field.
func (m *PipelineExecutionLogMutation) ResetEventType() {
	m.event_type = nil
}

// SetPipelineName sets the "pipeline_name" field.
func (m *PipelineExecutionLogMutation) SetPipelineName(s string) {
	m.pipeline_name = &s
}

// PipelineName returns the value of the "pipeline_name" field in the mutation.
func (m *PipelineExecutionLogMutation) PipelineName() (r string, exists bool) {
	v := m.pipeline_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPipelineName returns the old "pipeline_name" field's value of the PipelineExecutionLog entity.
// If the PipelineExecutionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PipelineExecutionLogMutation) OldPipelineName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPipelineName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPipelineName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPipelineName: %w", err)
	}
	return oldValue.PipelineName, nil
}

// ResetPipelineName resets all changes to the "pipeline_name" field.
func (m *PipelineExecutionLogMutation) ResetPipelineName() {
	m.pipeline_name = nil
}

// SetUsernameEmail sets the "username_email" field.
func (m *PipelineExecutionLogMutation) SetUsernameEmail(s string) {
	m.username_email = &s
}

// UsernameEmail returns the value of the "username_email" field in the mutation.
func (m *PipelineExecutionLogMutation) UsernameEmail() (r string, exists bool) {
	v := m.username_email
	if v == nil {
		return
	}
	return *v, true
}

// OldUsernameEmail returns the old "username_email" field's value of the PipelineExecutionLog entity.
// If the PipelineExecutionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PipelineExecutionLogMutation) OldUsernameEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsernameEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsernameEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsernameEmail: %w", err)
	}
	return oldValue.UsernameEmail, nil
}

// ResetUsernameEmail resets all changes to the "username_email" field.
func (m *PipelineExecutionLogMutation) ResetUsernameEmail() {
	m.username_email = nil
}

// SetCommitID sets the "commit_id" field.
func (m *PipelineExecutionLogMutation) SetCommitID(s string) {
	m.commit_id = &s
}

// CommitID returns the value of the "commit_id" field in the mutation.
func (m *PipelineExecutionLogMutation) CommitID() (r string, exists bool) {
	v := m.commit_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCommitID returns the old "commit_id" field's value of the PipelineExecutionLog entity.
// If the PipelineExecutionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PipelineExecutionLogMutation) OldCommitID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommitID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommitID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommitID: %w", err)
	}
	return oldValue.CommitID, nil
}

// ResetCommitID resets all changes to the "commit_id" field.
func (m *PipelineExecutionLogMutation) ResetCommitID() {
	m.commit_id = nil
}

// SetProjectURL sets the "project_url" field.
func (m *PipelineExecutionLogMutation) SetProjectURL(s string) {
	m.project_url = &s
}

// ProjectURL returns the value of the "project_url" field in the mutation.
func (m *PipelineExecutionLogMutation) ProjectURL() (r string, exists bool) {
	v := m.project_url
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectURL returns the old "project_url" field's value of the PipelineExecutionLog entity.
// If the PipelineExecutionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PipelineExecutionLogMutation) OldProjectURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectURL: %w", err)
	}
	return oldValue.ProjectURL, nil
}

// ResetProjectURL resets all changes to the "project_url" field.
func (m *PipelineExecutionLogMutation) ResetProjectURL() {
	m.project_url = nil
}

// SetStatus sets the "status" field.
func (m *PipelineExecutionLogMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *PipelineExecutionLogMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the PipelineExecutionLog entity.
// If the PipelineExecutionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PipelineExecutionLogMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PipelineExecutionLogMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PipelineExecutionLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PipelineExecutionLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PipelineExecutionLog entity.
// If the PipelineExecutionLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PipelineExecutionLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PipelineExecutionLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the PipelineExecutionLogMutation builder.
func (m *PipelineExecutionLogMutation) Where(ps ...predicate.PipelineExecutionLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PipelineExecutionLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PipelineExecutionLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PipelineExecutionLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PipelineExecutionLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PipelineExecutionLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PipelineExecutionLog).
func (m *PipelineExecutionLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PipelineExecutionLogMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.env != nil {
		fields = append(fields, pipelineexecutionlog.FieldEnv)
	}
	if m._type != nil {
		fields = append(fields, pipelineexecutionlog.FieldType)
	}
	if m.event_type != nil {
		fields = append(fields, pipelineexecutionlog.FieldEventType)
	}
	if m.pipeline_name != nil {
		fields = append(fields, pipelineexecutionlog.FieldPipelineName)
	}
	if m.username_email != nil {
		fields = append(fields, pipelineexecutionlog.FieldUsernameEmail)
	}
	if m.commit_id != nil {
		fields = append(fields, pipelineexecutionlog.FieldCommitID)
	}
	if m.project_url != nil {
		fields = append(fields, pipelineexecutionlog.FieldProjectURL)
	}
	if m.status != nil {
		fields = append(fields, pipelineexecutionlog.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, pipelineexecutionlog.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PipelineExecutionLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pipelineexecutionlog.FieldEnv:
		return m.Env()
	case pipelineexecutionlog.FieldType:
		return m.GetType()
	case pipelineexecutionlog.FieldEventType:
		return m.EventType()
	case pipelineexecutionlog.FieldPipelineName:
		return m.PipelineName()
	case pipelineexecutionlog.FieldUsernameEmail:
		return m.UsernameEmail()
	case pipelineexecutionlog.FieldCommitID:
		return m.CommitID()
	case pipelineexecutionlog.FieldProjectURL:
		return m.ProjectURL()
	case pipelineexecutionlog.FieldStatus:
		return m.Status()
	case pipelineexecutionlog.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PipelineExecutionLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pipelineexecutionlog.FieldEnv:
		return m.OldEnv(ctx)
	case pipelineexecutionlog.FieldType:
		return m.OldType(ctx)
	case pipelineexecutionlog.FieldEventType:
		return m.OldEventType(ctx)
	case pipelineexecutionlog.FieldPipelineName:
		return m.OldPipelineName(ctx)
	case pipelineexecutionlog.FieldUsernameEmail:
		return m.OldUsernameEmail(ctx)
	case pipelineexecutionlog.FieldCommitID:
		return m.OldCommitID(ctx)
	case pipelineexecutionlog.FieldProjectURL:
		return m.OldProjectURL(ctx)
	case pipelineexecutionlog.FieldStatus:
		return m.OldStatus(ctx)
	case pipelineexecutionlog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown PipelineExecutionLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PipelineExecutionLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pipelineexecutionlog.FieldEnv:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnv(v)
		return nil
	case pipelineexecutionlog.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case pipelineexecutionlog.FieldEventType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventType(v)
		return nil
	case pipelineexecutionlog.FieldPipelineName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPipelineName(v)
		return nil
	case pipelineexecutionlog.FieldUsernameEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsernameEmail(v)
		return nil
	case pipelineexecutionlog.FieldCommitID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommitID(v)
		return nil
	case pipelineexecutionlog.FieldProjectURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectURL(v)
		return nil
	case pipelineexecutionlog.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case pipelineexecutionlog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PipelineExecutionLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PipelineExecutionLogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PipelineExecutionLogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PipelineExecutionLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PipelineExecutionLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PipelineExecutionLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PipelineExecutionLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PipelineExecutionLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PipelineExecutionLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PipelineExecutionLogMutation) ResetField(name string) error {
	switch name {
	case pipelineexecutionlog.FieldEnv:
		m.ResetEnv()
		return nil
	case pipelineexecutionlog.FieldType:
		m.ResetType()
		return nil
	case pipelineexecutionlog.FieldEventType:
		m.ResetEventType()
		return nil
	case pipelineexecutionlog.FieldPipelineName:
		m.ResetPipelineName()
		return nil
	case pipelineexecutionlog.FieldUsernameEmail:
		m.ResetUsernameEmail()
		return nil
	case pipelineexecutionlog.FieldCommitID:
		m.ResetCommitID()
		return nil
	case pipelineexecutionlog.FieldProjectURL:
		m.ResetProjectURL()
		return nil
	case pipelineexecutionlog.FieldStatus:
		m.ResetStatus()
		return nil
	case pipelineexecutionlog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown PipelineExecutionLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PipelineExecutionLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PipelineExecutionLogMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PipelineExecutionLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PipelineExecutionLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PipelineExecutionLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PipelineExecutionLogMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PipelineExecutionLogMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PipelineExecutionLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PipelineExecutionLogMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PipelineExecutionLog edge %s", name)
}
