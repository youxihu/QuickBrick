// Code generated by ent, DO NOT EDIT.

package ent

import (
	"QuickBrick/internal/domain/ent/pipelineexecutionlog"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PipelineExecutionLogCreate is the builder for creating a PipelineExecutionLog entity.
type PipelineExecutionLogCreate struct {
	config
	mutation *PipelineExecutionLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEnv sets the "env" field.
func (pelc *PipelineExecutionLogCreate) SetEnv(s string) *PipelineExecutionLogCreate {
	pelc.mutation.SetEnv(s)
	return pelc
}

// SetType sets the "type" field.
func (pelc *PipelineExecutionLogCreate) SetType(s string) *PipelineExecutionLogCreate {
	pelc.mutation.SetType(s)
	return pelc
}

// SetEventType sets the "event_type" field.
func (pelc *PipelineExecutionLogCreate) SetEventType(s string) *PipelineExecutionLogCreate {
	pelc.mutation.SetEventType(s)
	return pelc
}

// SetPipelineName sets the "pipeline_name" field.
func (pelc *PipelineExecutionLogCreate) SetPipelineName(s string) *PipelineExecutionLogCreate {
	pelc.mutation.SetPipelineName(s)
	return pelc
}

// SetUsernameEmail sets the "username_email" field.
func (pelc *PipelineExecutionLogCreate) SetUsernameEmail(s string) *PipelineExecutionLogCreate {
	pelc.mutation.SetUsernameEmail(s)
	return pelc
}

// SetCommitID sets the "commit_id" field.
func (pelc *PipelineExecutionLogCreate) SetCommitID(s string) *PipelineExecutionLogCreate {
	pelc.mutation.SetCommitID(s)
	return pelc
}

// SetProjectURL sets the "project_url" field.
func (pelc *PipelineExecutionLogCreate) SetProjectURL(s string) *PipelineExecutionLogCreate {
	pelc.mutation.SetProjectURL(s)
	return pelc
}

// SetStatus sets the "status" field.
func (pelc *PipelineExecutionLogCreate) SetStatus(s string) *PipelineExecutionLogCreate {
	pelc.mutation.SetStatus(s)
	return pelc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pelc *PipelineExecutionLogCreate) SetNillableStatus(s *string) *PipelineExecutionLogCreate {
	if s != nil {
		pelc.SetStatus(*s)
	}
	return pelc
}

// SetCreatedAt sets the "created_at" field.
func (pelc *PipelineExecutionLogCreate) SetCreatedAt(t time.Time) *PipelineExecutionLogCreate {
	pelc.mutation.SetCreatedAt(t)
	return pelc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pelc *PipelineExecutionLogCreate) SetNillableCreatedAt(t *time.Time) *PipelineExecutionLogCreate {
	if t != nil {
		pelc.SetCreatedAt(*t)
	}
	return pelc
}

// SetID sets the "id" field.
func (pelc *PipelineExecutionLogCreate) SetID(i int64) *PipelineExecutionLogCreate {
	pelc.mutation.SetID(i)
	return pelc
}

// Mutation returns the PipelineExecutionLogMutation object of the builder.
func (pelc *PipelineExecutionLogCreate) Mutation() *PipelineExecutionLogMutation {
	return pelc.mutation
}

// Save creates the PipelineExecutionLog in the database.
func (pelc *PipelineExecutionLogCreate) Save(ctx context.Context) (*PipelineExecutionLog, error) {
	pelc.defaults()
	return withHooks(ctx, pelc.sqlSave, pelc.mutation, pelc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pelc *PipelineExecutionLogCreate) SaveX(ctx context.Context) *PipelineExecutionLog {
	v, err := pelc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pelc *PipelineExecutionLogCreate) Exec(ctx context.Context) error {
	_, err := pelc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pelc *PipelineExecutionLogCreate) ExecX(ctx context.Context) {
	if err := pelc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pelc *PipelineExecutionLogCreate) defaults() {
	if _, ok := pelc.mutation.Status(); !ok {
		v := pipelineexecutionlog.DefaultStatus
		pelc.mutation.SetStatus(v)
	}
	if _, ok := pelc.mutation.CreatedAt(); !ok {
		v := pipelineexecutionlog.DefaultCreatedAt()
		pelc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pelc *PipelineExecutionLogCreate) check() error {
	if _, ok := pelc.mutation.Env(); !ok {
		return &ValidationError{Name: "env", err: errors.New(`ent: missing required field "PipelineExecutionLog.env"`)}
	}
	if _, ok := pelc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PipelineExecutionLog.type"`)}
	}
	if _, ok := pelc.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "PipelineExecutionLog.event_type"`)}
	}
	if _, ok := pelc.mutation.PipelineName(); !ok {
		return &ValidationError{Name: "pipeline_name", err: errors.New(`ent: missing required field "PipelineExecutionLog.pipeline_name"`)}
	}
	if _, ok := pelc.mutation.UsernameEmail(); !ok {
		return &ValidationError{Name: "username_email", err: errors.New(`ent: missing required field "PipelineExecutionLog.username_email"`)}
	}
	if _, ok := pelc.mutation.CommitID(); !ok {
		return &ValidationError{Name: "commit_id", err: errors.New(`ent: missing required field "PipelineExecutionLog.commit_id"`)}
	}
	if _, ok := pelc.mutation.ProjectURL(); !ok {
		return &ValidationError{Name: "project_url", err: errors.New(`ent: missing required field "PipelineExecutionLog.project_url"`)}
	}
	if _, ok := pelc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PipelineExecutionLog.status"`)}
	}
	if _, ok := pelc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PipelineExecutionLog.created_at"`)}
	}
	return nil
}

func (pelc *PipelineExecutionLogCreate) sqlSave(ctx context.Context) (*PipelineExecutionLog, error) {
	if err := pelc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pelc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pelc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pelc.mutation.id = &_node.ID
	pelc.mutation.done = true
	return _node, nil
}

func (pelc *PipelineExecutionLogCreate) createSpec() (*PipelineExecutionLog, *sqlgraph.CreateSpec) {
	var (
		_node = &PipelineExecutionLog{config: pelc.config}
		_spec = sqlgraph.NewCreateSpec(pipelineexecutionlog.Table, sqlgraph.NewFieldSpec(pipelineexecutionlog.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = pelc.conflict
	if id, ok := pelc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pelc.mutation.Env(); ok {
		_spec.SetField(pipelineexecutionlog.FieldEnv, field.TypeString, value)
		_node.Env = value
	}
	if value, ok := pelc.mutation.GetType(); ok {
		_spec.SetField(pipelineexecutionlog.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := pelc.mutation.EventType(); ok {
		_spec.SetField(pipelineexecutionlog.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := pelc.mutation.PipelineName(); ok {
		_spec.SetField(pipelineexecutionlog.FieldPipelineName, field.TypeString, value)
		_node.PipelineName = value
	}
	if value, ok := pelc.mutation.UsernameEmail(); ok {
		_spec.SetField(pipelineexecutionlog.FieldUsernameEmail, field.TypeString, value)
		_node.UsernameEmail = value
	}
	if value, ok := pelc.mutation.CommitID(); ok {
		_spec.SetField(pipelineexecutionlog.FieldCommitID, field.TypeString, value)
		_node.CommitID = value
	}
	if value, ok := pelc.mutation.ProjectURL(); ok {
		_spec.SetField(pipelineexecutionlog.FieldProjectURL, field.TypeString, value)
		_node.ProjectURL = value
	}
	if value, ok := pelc.mutation.Status(); ok {
		_spec.SetField(pipelineexecutionlog.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pelc.mutation.CreatedAt(); ok {
		_spec.SetField(pipelineexecutionlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PipelineExecutionLog.Create().
//		SetEnv(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PipelineExecutionLogUpsert) {
//			SetEnv(v+v).
//		}).
//		Exec(ctx)
func (pelc *PipelineExecutionLogCreate) OnConflict(opts ...sql.ConflictOption) *PipelineExecutionLogUpsertOne {
	pelc.conflict = opts
	return &PipelineExecutionLogUpsertOne{
		create: pelc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PipelineExecutionLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pelc *PipelineExecutionLogCreate) OnConflictColumns(columns ...string) *PipelineExecutionLogUpsertOne {
	pelc.conflict = append(pelc.conflict, sql.ConflictColumns(columns...))
	return &PipelineExecutionLogUpsertOne{
		create: pelc,
	}
}

type (
	// PipelineExecutionLogUpsertOne is the builder for "upsert"-ing
	//  one PipelineExecutionLog node.
	PipelineExecutionLogUpsertOne struct {
		create *PipelineExecutionLogCreate
	}

	// PipelineExecutionLogUpsert is the "OnConflict" setter.
	PipelineExecutionLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetEnv sets the "env" field.
func (u *PipelineExecutionLogUpsert) SetEnv(v string) *PipelineExecutionLogUpsert {
	u.Set(pipelineexecutionlog.FieldEnv, v)
	return u
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsert) UpdateEnv() *PipelineExecutionLogUpsert {
	u.SetExcluded(pipelineexecutionlog.FieldEnv)
	return u
}

// SetType sets the "type" field.
func (u *PipelineExecutionLogUpsert) SetType(v string) *PipelineExecutionLogUpsert {
	u.Set(pipelineexecutionlog.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsert) UpdateType() *PipelineExecutionLogUpsert {
	u.SetExcluded(pipelineexecutionlog.FieldType)
	return u
}

// SetEventType sets the "event_type" field.
func (u *PipelineExecutionLogUpsert) SetEventType(v string) *PipelineExecutionLogUpsert {
	u.Set(pipelineexecutionlog.FieldEventType, v)
	return u
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsert) UpdateEventType() *PipelineExecutionLogUpsert {
	u.SetExcluded(pipelineexecutionlog.FieldEventType)
	return u
}

// SetPipelineName sets the "pipeline_name" field.
func (u *PipelineExecutionLogUpsert) SetPipelineName(v string) *PipelineExecutionLogUpsert {
	u.Set(pipelineexecutionlog.FieldPipelineName, v)
	return u
}

// UpdatePipelineName sets the "pipeline_name" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsert) UpdatePipelineName() *PipelineExecutionLogUpsert {
	u.SetExcluded(pipelineexecutionlog.FieldPipelineName)
	return u
}

// SetUsernameEmail sets the "username_email" field.
func (u *PipelineExecutionLogUpsert) SetUsernameEmail(v string) *PipelineExecutionLogUpsert {
	u.Set(pipelineexecutionlog.FieldUsernameEmail, v)
	return u
}

// UpdateUsernameEmail sets the "username_email" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsert) UpdateUsernameEmail() *PipelineExecutionLogUpsert {
	u.SetExcluded(pipelineexecutionlog.FieldUsernameEmail)
	return u
}

// SetCommitID sets the "commit_id" field.
func (u *PipelineExecutionLogUpsert) SetCommitID(v string) *PipelineExecutionLogUpsert {
	u.Set(pipelineexecutionlog.FieldCommitID, v)
	return u
}

// UpdateCommitID sets the "commit_id" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsert) UpdateCommitID() *PipelineExecutionLogUpsert {
	u.SetExcluded(pipelineexecutionlog.FieldCommitID)
	return u
}

// SetProjectURL sets the "project_url" field.
func (u *PipelineExecutionLogUpsert) SetProjectURL(v string) *PipelineExecutionLogUpsert {
	u.Set(pipelineexecutionlog.FieldProjectURL, v)
	return u
}

// UpdateProjectURL sets the "project_url" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsert) UpdateProjectURL() *PipelineExecutionLogUpsert {
	u.SetExcluded(pipelineexecutionlog.FieldProjectURL)
	return u
}

// SetStatus sets the "status" field.
func (u *PipelineExecutionLogUpsert) SetStatus(v string) *PipelineExecutionLogUpsert {
	u.Set(pipelineexecutionlog.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsert) UpdateStatus() *PipelineExecutionLogUpsert {
	u.SetExcluded(pipelineexecutionlog.FieldStatus)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PipelineExecutionLogUpsert) SetCreatedAt(v time.Time) *PipelineExecutionLogUpsert {
	u.Set(pipelineexecutionlog.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsert) UpdateCreatedAt() *PipelineExecutionLogUpsert {
	u.SetExcluded(pipelineexecutionlog.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PipelineExecutionLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pipelineexecutionlog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PipelineExecutionLogUpsertOne) UpdateNewValues() *PipelineExecutionLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pipelineexecutionlog.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PipelineExecutionLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PipelineExecutionLogUpsertOne) Ignore() *PipelineExecutionLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PipelineExecutionLogUpsertOne) DoNothing() *PipelineExecutionLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PipelineExecutionLogCreate.OnConflict
// documentation for more info.
func (u *PipelineExecutionLogUpsertOne) Update(set func(*PipelineExecutionLogUpsert)) *PipelineExecutionLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PipelineExecutionLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetEnv sets the "env" field.
func (u *PipelineExecutionLogUpsertOne) SetEnv(v string) *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetEnv(v)
	})
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertOne) UpdateEnv() *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateEnv()
	})
}

// SetType sets the "type" field.
func (u *PipelineExecutionLogUpsertOne) SetType(v string) *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertOne) UpdateType() *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateType()
	})
}

// SetEventType sets the "event_type" field.
func (u *PipelineExecutionLogUpsertOne) SetEventType(v string) *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertOne) UpdateEventType() *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateEventType()
	})
}

// SetPipelineName sets the "pipeline_name" field.
func (u *PipelineExecutionLogUpsertOne) SetPipelineName(v string) *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetPipelineName(v)
	})
}

// UpdatePipelineName sets the "pipeline_name" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertOne) UpdatePipelineName() *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdatePipelineName()
	})
}

// SetUsernameEmail sets the "username_email" field.
func (u *PipelineExecutionLogUpsertOne) SetUsernameEmail(v string) *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetUsernameEmail(v)
	})
}

// UpdateUsernameEmail sets the "username_email" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertOne) UpdateUsernameEmail() *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateUsernameEmail()
	})
}

// SetCommitID sets the "commit_id" field.
func (u *PipelineExecutionLogUpsertOne) SetCommitID(v string) *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetCommitID(v)
	})
}

// UpdateCommitID sets the "commit_id" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertOne) UpdateCommitID() *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateCommitID()
	})
}

// SetProjectURL sets the "project_url" field.
func (u *PipelineExecutionLogUpsertOne) SetProjectURL(v string) *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetProjectURL(v)
	})
}

// UpdateProjectURL sets the "project_url" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertOne) UpdateProjectURL() *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateProjectURL()
	})
}

// SetStatus sets the "status" field.
func (u *PipelineExecutionLogUpsertOne) SetStatus(v string) *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertOne) UpdateStatus() *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PipelineExecutionLogUpsertOne) SetCreatedAt(v time.Time) *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertOne) UpdateCreatedAt() *PipelineExecutionLogUpsertOne {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *PipelineExecutionLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PipelineExecutionLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PipelineExecutionLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PipelineExecutionLogUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PipelineExecutionLogUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PipelineExecutionLogCreateBulk is the builder for creating many PipelineExecutionLog entities in bulk.
type PipelineExecutionLogCreateBulk struct {
	config
	err      error
	builders []*PipelineExecutionLogCreate
	conflict []sql.ConflictOption
}

// Save creates the PipelineExecutionLog entities in the database.
func (pelcb *PipelineExecutionLogCreateBulk) Save(ctx context.Context) ([]*PipelineExecutionLog, error) {
	if pelcb.err != nil {
		return nil, pelcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pelcb.builders))
	nodes := make([]*PipelineExecutionLog, len(pelcb.builders))
	mutators := make([]Mutator, len(pelcb.builders))
	for i := range pelcb.builders {
		func(i int, root context.Context) {
			builder := pelcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PipelineExecutionLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pelcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pelcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pelcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pelcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pelcb *PipelineExecutionLogCreateBulk) SaveX(ctx context.Context) []*PipelineExecutionLog {
	v, err := pelcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pelcb *PipelineExecutionLogCreateBulk) Exec(ctx context.Context) error {
	_, err := pelcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pelcb *PipelineExecutionLogCreateBulk) ExecX(ctx context.Context) {
	if err := pelcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PipelineExecutionLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PipelineExecutionLogUpsert) {
//			SetEnv(v+v).
//		}).
//		Exec(ctx)
func (pelcb *PipelineExecutionLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *PipelineExecutionLogUpsertBulk {
	pelcb.conflict = opts
	return &PipelineExecutionLogUpsertBulk{
		create: pelcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PipelineExecutionLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pelcb *PipelineExecutionLogCreateBulk) OnConflictColumns(columns ...string) *PipelineExecutionLogUpsertBulk {
	pelcb.conflict = append(pelcb.conflict, sql.ConflictColumns(columns...))
	return &PipelineExecutionLogUpsertBulk{
		create: pelcb,
	}
}

// PipelineExecutionLogUpsertBulk is the builder for "upsert"-ing
// a bulk of PipelineExecutionLog nodes.
type PipelineExecutionLogUpsertBulk struct {
	create *PipelineExecutionLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PipelineExecutionLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pipelineexecutionlog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PipelineExecutionLogUpsertBulk) UpdateNewValues() *PipelineExecutionLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pipelineexecutionlog.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PipelineExecutionLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PipelineExecutionLogUpsertBulk) Ignore() *PipelineExecutionLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PipelineExecutionLogUpsertBulk) DoNothing() *PipelineExecutionLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PipelineExecutionLogCreateBulk.OnConflict
// documentation for more info.
func (u *PipelineExecutionLogUpsertBulk) Update(set func(*PipelineExecutionLogUpsert)) *PipelineExecutionLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PipelineExecutionLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetEnv sets the "env" field.
func (u *PipelineExecutionLogUpsertBulk) SetEnv(v string) *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetEnv(v)
	})
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertBulk) UpdateEnv() *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateEnv()
	})
}

// SetType sets the "type" field.
func (u *PipelineExecutionLogUpsertBulk) SetType(v string) *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertBulk) UpdateType() *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateType()
	})
}

// SetEventType sets the "event_type" field.
func (u *PipelineExecutionLogUpsertBulk) SetEventType(v string) *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetEventType(v)
	})
}

// UpdateEventType sets the "event_type" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertBulk) UpdateEventType() *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateEventType()
	})
}

// SetPipelineName sets the "pipeline_name" field.
func (u *PipelineExecutionLogUpsertBulk) SetPipelineName(v string) *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetPipelineName(v)
	})
}

// UpdatePipelineName sets the "pipeline_name" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertBulk) UpdatePipelineName() *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdatePipelineName()
	})
}

// SetUsernameEmail sets the "username_email" field.
func (u *PipelineExecutionLogUpsertBulk) SetUsernameEmail(v string) *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetUsernameEmail(v)
	})
}

// UpdateUsernameEmail sets the "username_email" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertBulk) UpdateUsernameEmail() *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateUsernameEmail()
	})
}

// SetCommitID sets the "commit_id" field.
func (u *PipelineExecutionLogUpsertBulk) SetCommitID(v string) *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetCommitID(v)
	})
}

// UpdateCommitID sets the "commit_id" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertBulk) UpdateCommitID() *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateCommitID()
	})
}

// SetProjectURL sets the "project_url" field.
func (u *PipelineExecutionLogUpsertBulk) SetProjectURL(v string) *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetProjectURL(v)
	})
}

// UpdateProjectURL sets the "project_url" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertBulk) UpdateProjectURL() *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateProjectURL()
	})
}

// SetStatus sets the "status" field.
func (u *PipelineExecutionLogUpsertBulk) SetStatus(v string) *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertBulk) UpdateStatus() *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PipelineExecutionLogUpsertBulk) SetCreatedAt(v time.Time) *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PipelineExecutionLogUpsertBulk) UpdateCreatedAt() *PipelineExecutionLogUpsertBulk {
	return u.Update(func(s *PipelineExecutionLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *PipelineExecutionLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PipelineExecutionLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PipelineExecutionLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PipelineExecutionLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
