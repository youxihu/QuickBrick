// Code generated by ent, DO NOT EDIT.

package ent

import (
	"QuickBrick/internal/domain/ent/pipelineexecutionlog"
	"QuickBrick/internal/domain/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PipelineExecutionLogDelete is the builder for deleting a PipelineExecutionLog entity.
type PipelineExecutionLogDelete struct {
	config
	hooks    []Hook
	mutation *PipelineExecutionLogMutation
}

// Where appends a list predicates to the PipelineExecutionLogDelete builder.
func (peld *PipelineExecutionLogDelete) Where(ps ...predicate.PipelineExecutionLog) *PipelineExecutionLogDelete {
	peld.mutation.Where(ps...)
	return peld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (peld *PipelineExecutionLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, peld.sqlExec, peld.mutation, peld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (peld *PipelineExecutionLogDelete) ExecX(ctx context.Context) int {
	n, err := peld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (peld *PipelineExecutionLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(pipelineexecutionlog.Table, sqlgraph.NewFieldSpec(pipelineexecutionlog.FieldID, field.TypeInt64))
	if ps := peld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, peld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	peld.mutation.done = true
	return affected, err
}

// PipelineExecutionLogDeleteOne is the builder for deleting a single PipelineExecutionLog entity.
type PipelineExecutionLogDeleteOne struct {
	peld *PipelineExecutionLogDelete
}

// Where appends a list predicates to the PipelineExecutionLogDelete builder.
func (peldo *PipelineExecutionLogDeleteOne) Where(ps ...predicate.PipelineExecutionLog) *PipelineExecutionLogDeleteOne {
	peldo.peld.mutation.Where(ps...)
	return peldo
}

// Exec executes the deletion query.
func (peldo *PipelineExecutionLogDeleteOne) Exec(ctx context.Context) error {
	n, err := peldo.peld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{pipelineexecutionlog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (peldo *PipelineExecutionLogDeleteOne) ExecX(ctx context.Context) {
	if err := peldo.Exec(ctx); err != nil {
		panic(err)
	}
}
