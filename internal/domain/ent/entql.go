// Code generated by ent, DO NOT EDIT.

package ent

import (
	"QuickBrick/internal/domain/ent/retryhistory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   retryhistory.Table,
			Columns: retryhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: retryhistory.FieldID,
			},
		},
		Type: "RetryHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			retryhistory.FieldCreatedAt:     {Type: field.TypeTime, Column: retryhistory.FieldCreatedAt},
			retryhistory.FieldEnv:           {Type: field.TypeString, Column: retryhistory.FieldEnv},
			retryhistory.FieldProject:       {Type: field.TypeString, Column: retryhistory.FieldProject},
			retryhistory.FieldProjectURL:    {Type: field.TypeString, Column: retryhistory.FieldProjectURL},
			retryhistory.FieldRef:           {Type: field.TypeString, Column: retryhistory.FieldRef},
			retryhistory.FieldEventType:     {Type: field.TypeString, Column: retryhistory.FieldEventType},
			retryhistory.FieldCommitID:      {Type: field.TypeString, Column: retryhistory.FieldCommitID},
			retryhistory.FieldCommitter:     {Type: field.TypeString, Column: retryhistory.FieldCommitter},
			retryhistory.FieldCommitMessage: {Type: field.TypeString, Column: retryhistory.FieldCommitMessage},
			retryhistory.FieldCommitURL:     {Type: field.TypeString, Column: retryhistory.FieldCommitURL},
			retryhistory.FieldPipelineName:  {Type: field.TypeString, Column: retryhistory.FieldPipelineName},
			retryhistory.FieldPipelineType:  {Type: field.TypeString, Column: retryhistory.FieldPipelineType},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (rhq *RetryHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	rhq.predicates = append(rhq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RetryHistoryQuery builder.
func (rhq *RetryHistoryQuery) Filter() *RetryHistoryFilter {
	return &RetryHistoryFilter{config: rhq.config, predicateAdder: rhq}
}

// addPredicate implements the predicateAdder interface.
func (m *RetryHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RetryHistoryMutation builder.
func (m *RetryHistoryMutation) Filter() *RetryHistoryFilter {
	return &RetryHistoryFilter{config: m.config, predicateAdder: m}
}

// RetryHistoryFilter provides a generic filtering capability at runtime for RetryHistoryQuery.
type RetryHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RetryHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *RetryHistoryFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(retryhistory.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RetryHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(retryhistory.FieldCreatedAt))
}

// WhereEnv applies the entql string predicate on the env field.
func (f *RetryHistoryFilter) WhereEnv(p entql.StringP) {
	f.Where(p.Field(retryhistory.FieldEnv))
}

// WhereProject applies the entql string predicate on the project field.
func (f *RetryHistoryFilter) WhereProject(p entql.StringP) {
	f.Where(p.Field(retryhistory.FieldProject))
}

// WhereProjectURL applies the entql string predicate on the project_url field.
func (f *RetryHistoryFilter) WhereProjectURL(p entql.StringP) {
	f.Where(p.Field(retryhistory.FieldProjectURL))
}

// WhereRef applies the entql string predicate on the ref field.
func (f *RetryHistoryFilter) WhereRef(p entql.StringP) {
	f.Where(p.Field(retryhistory.FieldRef))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *RetryHistoryFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(retryhistory.FieldEventType))
}

// WhereCommitID applies the entql string predicate on the commit_id field.
func (f *RetryHistoryFilter) WhereCommitID(p entql.StringP) {
	f.Where(p.Field(retryhistory.FieldCommitID))
}

// WhereCommitter applies the entql string predicate on the committer field.
func (f *RetryHistoryFilter) WhereCommitter(p entql.StringP) {
	f.Where(p.Field(retryhistory.FieldCommitter))
}

// WhereCommitMessage applies the entql string predicate on the commit_message field.
func (f *RetryHistoryFilter) WhereCommitMessage(p entql.StringP) {
	f.Where(p.Field(retryhistory.FieldCommitMessage))
}

// WhereCommitURL applies the entql string predicate on the commit_url field.
func (f *RetryHistoryFilter) WhereCommitURL(p entql.StringP) {
	f.Where(p.Field(retryhistory.FieldCommitURL))
}

// WherePipelineName applies the entql string predicate on the pipeline_name field.
func (f *RetryHistoryFilter) WherePipelineName(p entql.StringP) {
	f.Where(p.Field(retryhistory.FieldPipelineName))
}

// WherePipelineType applies the entql string predicate on the pipeline_type field.
func (f *RetryHistoryFilter) WherePipelineType(p entql.StringP) {
	f.Where(p.Field(retryhistory.FieldPipelineType))
}
