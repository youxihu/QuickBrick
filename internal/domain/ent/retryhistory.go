// Code generated by ent, DO NOT EDIT.

package ent

import (
	"QuickBrick/internal/domain/ent/retryhistory"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RetryHistory is the model entity for the RetryHistory schema.
type RetryHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 构建环境，如 fe-beta
	Env string `json:"env,omitempty"`
	// 项目名称，如 bbx
	Project string `json:"project,omitempty"`
	// 项目地址，如 http://xxx/bbx
	ProjectURL string `json:"project_url,omitempty"`
	// 分支/Tag 名称，如 refs/heads/master
	Ref string `json:"ref,omitempty"`
	// 事件类型，如 push
	EventType string `json:"event_type,omitempty"`
	// 提交 ID
	CommitID string `json:"commit_id,omitempty"`
	// 提交者（名字+邮箱）
	Committer string `json:"committer,omitempty"`
	// 提交信息
	CommitMessage string `json:"commit_message,omitempty"`
	// 提交链接
	CommitURL string `json:"commit_url,omitempty"`
	// Pipeline 名称
	PipelineName string `json:"pipeline_name,omitempty"`
	// Pipeline 类型
	PipelineType string `json:"pipeline_type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RetryHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case retryhistory.FieldID:
			values[i] = new(sql.NullInt64)
		case retryhistory.FieldEnv, retryhistory.FieldProject, retryhistory.FieldProjectURL, retryhistory.FieldRef, retryhistory.FieldEventType, retryhistory.FieldCommitID, retryhistory.FieldCommitter, retryhistory.FieldCommitMessage, retryhistory.FieldCommitURL, retryhistory.FieldPipelineName, retryhistory.FieldPipelineType:
			values[i] = new(sql.NullString)
		case retryhistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RetryHistory fields.
func (rh *RetryHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case retryhistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rh.ID = int64(value.Int64)
		case retryhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rh.CreatedAt = value.Time
			}
		case retryhistory.FieldEnv:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field env", values[i])
			} else if value.Valid {
				rh.Env = value.String
			}
		case retryhistory.FieldProject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project", values[i])
			} else if value.Valid {
				rh.Project = value.String
			}
		case retryhistory.FieldProjectURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_url", values[i])
			} else if value.Valid {
				rh.ProjectURL = value.String
			}
		case retryhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				rh.Ref = value.String
			}
		case retryhistory.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				rh.EventType = value.String
			}
		case retryhistory.FieldCommitID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commit_id", values[i])
			} else if value.Valid {
				rh.CommitID = value.String
			}
		case retryhistory.FieldCommitter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field committer", values[i])
			} else if value.Valid {
				rh.Committer = value.String
			}
		case retryhistory.FieldCommitMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commit_message", values[i])
			} else if value.Valid {
				rh.CommitMessage = value.String
			}
		case retryhistory.FieldCommitURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commit_url", values[i])
			} else if value.Valid {
				rh.CommitURL = value.String
			}
		case retryhistory.FieldPipelineName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pipeline_name", values[i])
			} else if value.Valid {
				rh.PipelineName = value.String
			}
		case retryhistory.FieldPipelineType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pipeline_type", values[i])
			} else if value.Valid {
				rh.PipelineType = value.String
			}
		default:
			rh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RetryHistory.
// This includes values selected through modifiers, order, etc.
func (rh *RetryHistory) Value(name string) (ent.Value, error) {
	return rh.selectValues.Get(name)
}

// Update returns a builder for updating this RetryHistory.
// Note that you need to call RetryHistory.Unwrap() before calling this method if this RetryHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (rh *RetryHistory) Update() *RetryHistoryUpdateOne {
	return NewRetryHistoryClient(rh.config).UpdateOne(rh)
}

// Unwrap unwraps the RetryHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rh *RetryHistory) Unwrap() *RetryHistory {
	_tx, ok := rh.config.driver.(*txDriver)
	if !ok {
		panic("ent: RetryHistory is not a transactional entity")
	}
	rh.config.driver = _tx.drv
	return rh
}

// String implements the fmt.Stringer.
func (rh *RetryHistory) String() string {
	var builder strings.Builder
	builder.WriteString("RetryHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rh.ID))
	builder.WriteString("created_at=")
	builder.WriteString(rh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("env=")
	builder.WriteString(rh.Env)
	builder.WriteString(", ")
	builder.WriteString("project=")
	builder.WriteString(rh.Project)
	builder.WriteString(", ")
	builder.WriteString("project_url=")
	builder.WriteString(rh.ProjectURL)
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(rh.Ref)
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(rh.EventType)
	builder.WriteString(", ")
	builder.WriteString("commit_id=")
	builder.WriteString(rh.CommitID)
	builder.WriteString(", ")
	builder.WriteString("committer=")
	builder.WriteString(rh.Committer)
	builder.WriteString(", ")
	builder.WriteString("commit_message=")
	builder.WriteString(rh.CommitMessage)
	builder.WriteString(", ")
	builder.WriteString("commit_url=")
	builder.WriteString(rh.CommitURL)
	builder.WriteString(", ")
	builder.WriteString("pipeline_name=")
	builder.WriteString(rh.PipelineName)
	builder.WriteString(", ")
	builder.WriteString("pipeline_type=")
	builder.WriteString(rh.PipelineType)
	builder.WriteByte(')')
	return builder.String()
}

// RetryHistories is a parsable slice of RetryHistory.
type RetryHistories []*RetryHistory
