// Code generated by ent, DO NOT EDIT.

package ent

import (
	"QuickBrick/internal/domain/ent/pipelineexecutionlog"
	"QuickBrick/internal/domain/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PipelineExecutionLogUpdate is the builder for updating PipelineExecutionLog entities.
type PipelineExecutionLogUpdate struct {
	config
	hooks     []Hook
	mutation  *PipelineExecutionLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PipelineExecutionLogUpdate builder.
func (pelu *PipelineExecutionLogUpdate) Where(ps ...predicate.PipelineExecutionLog) *PipelineExecutionLogUpdate {
	pelu.mutation.Where(ps...)
	return pelu
}

// SetEnv sets the "env" field.
func (pelu *PipelineExecutionLogUpdate) SetEnv(s string) *PipelineExecutionLogUpdate {
	pelu.mutation.SetEnv(s)
	return pelu
}

// SetNillableEnv sets the "env" field if the given value is not nil.
func (pelu *PipelineExecutionLogUpdate) SetNillableEnv(s *string) *PipelineExecutionLogUpdate {
	if s != nil {
		pelu.SetEnv(*s)
	}
	return pelu
}

// SetType sets the "type" field.
func (pelu *PipelineExecutionLogUpdate) SetType(s string) *PipelineExecutionLogUpdate {
	pelu.mutation.SetType(s)
	return pelu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pelu *PipelineExecutionLogUpdate) SetNillableType(s *string) *PipelineExecutionLogUpdate {
	if s != nil {
		pelu.SetType(*s)
	}
	return pelu
}

// SetEventType sets the "event_type" field.
func (pelu *PipelineExecutionLogUpdate) SetEventType(s string) *PipelineExecutionLogUpdate {
	pelu.mutation.SetEventType(s)
	return pelu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (pelu *PipelineExecutionLogUpdate) SetNillableEventType(s *string) *PipelineExecutionLogUpdate {
	if s != nil {
		pelu.SetEventType(*s)
	}
	return pelu
}

// SetPipelineName sets the "pipeline_name" field.
func (pelu *PipelineExecutionLogUpdate) SetPipelineName(s string) *PipelineExecutionLogUpdate {
	pelu.mutation.SetPipelineName(s)
	return pelu
}

// SetNillablePipelineName sets the "pipeline_name" field if the given value is not nil.
func (pelu *PipelineExecutionLogUpdate) SetNillablePipelineName(s *string) *PipelineExecutionLogUpdate {
	if s != nil {
		pelu.SetPipelineName(*s)
	}
	return pelu
}

// SetUsernameEmail sets the "username_email" field.
func (pelu *PipelineExecutionLogUpdate) SetUsernameEmail(s string) *PipelineExecutionLogUpdate {
	pelu.mutation.SetUsernameEmail(s)
	return pelu
}

// SetNillableUsernameEmail sets the "username_email" field if the given value is not nil.
func (pelu *PipelineExecutionLogUpdate) SetNillableUsernameEmail(s *string) *PipelineExecutionLogUpdate {
	if s != nil {
		pelu.SetUsernameEmail(*s)
	}
	return pelu
}

// SetCommitID sets the "commit_id" field.
func (pelu *PipelineExecutionLogUpdate) SetCommitID(s string) *PipelineExecutionLogUpdate {
	pelu.mutation.SetCommitID(s)
	return pelu
}

// SetNillableCommitID sets the "commit_id" field if the given value is not nil.
func (pelu *PipelineExecutionLogUpdate) SetNillableCommitID(s *string) *PipelineExecutionLogUpdate {
	if s != nil {
		pelu.SetCommitID(*s)
	}
	return pelu
}

// SetProjectURL sets the "project_url" field.
func (pelu *PipelineExecutionLogUpdate) SetProjectURL(s string) *PipelineExecutionLogUpdate {
	pelu.mutation.SetProjectURL(s)
	return pelu
}

// SetNillableProjectURL sets the "project_url" field if the given value is not nil.
func (pelu *PipelineExecutionLogUpdate) SetNillableProjectURL(s *string) *PipelineExecutionLogUpdate {
	if s != nil {
		pelu.SetProjectURL(*s)
	}
	return pelu
}

// SetStatus sets the "status" field.
func (pelu *PipelineExecutionLogUpdate) SetStatus(s string) *PipelineExecutionLogUpdate {
	pelu.mutation.SetStatus(s)
	return pelu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pelu *PipelineExecutionLogUpdate) SetNillableStatus(s *string) *PipelineExecutionLogUpdate {
	if s != nil {
		pelu.SetStatus(*s)
	}
	return pelu
}

// SetCreatedAt sets the "created_at" field.
func (pelu *PipelineExecutionLogUpdate) SetCreatedAt(t time.Time) *PipelineExecutionLogUpdate {
	pelu.mutation.SetCreatedAt(t)
	return pelu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pelu *PipelineExecutionLogUpdate) SetNillableCreatedAt(t *time.Time) *PipelineExecutionLogUpdate {
	if t != nil {
		pelu.SetCreatedAt(*t)
	}
	return pelu
}

// Mutation returns the PipelineExecutionLogMutation object of the builder.
func (pelu *PipelineExecutionLogUpdate) Mutation() *PipelineExecutionLogMutation {
	return pelu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pelu *PipelineExecutionLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pelu.sqlSave, pelu.mutation, pelu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pelu *PipelineExecutionLogUpdate) SaveX(ctx context.Context) int {
	affected, err := pelu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pelu *PipelineExecutionLogUpdate) Exec(ctx context.Context) error {
	_, err := pelu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pelu *PipelineExecutionLogUpdate) ExecX(ctx context.Context) {
	if err := pelu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pelu *PipelineExecutionLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PipelineExecutionLogUpdate {
	pelu.modifiers = append(pelu.modifiers, modifiers...)
	return pelu
}

func (pelu *PipelineExecutionLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pipelineexecutionlog.Table, pipelineexecutionlog.Columns, sqlgraph.NewFieldSpec(pipelineexecutionlog.FieldID, field.TypeInt64))
	if ps := pelu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pelu.mutation.Env(); ok {
		_spec.SetField(pipelineexecutionlog.FieldEnv, field.TypeString, value)
	}
	if value, ok := pelu.mutation.GetType(); ok {
		_spec.SetField(pipelineexecutionlog.FieldType, field.TypeString, value)
	}
	if value, ok := pelu.mutation.EventType(); ok {
		_spec.SetField(pipelineexecutionlog.FieldEventType, field.TypeString, value)
	}
	if value, ok := pelu.mutation.PipelineName(); ok {
		_spec.SetField(pipelineexecutionlog.FieldPipelineName, field.TypeString, value)
	}
	if value, ok := pelu.mutation.UsernameEmail(); ok {
		_spec.SetField(pipelineexecutionlog.FieldUsernameEmail, field.TypeString, value)
	}
	if value, ok := pelu.mutation.CommitID(); ok {
		_spec.SetField(pipelineexecutionlog.FieldCommitID, field.TypeString, value)
	}
	if value, ok := pelu.mutation.ProjectURL(); ok {
		_spec.SetField(pipelineexecutionlog.FieldProjectURL, field.TypeString, value)
	}
	if value, ok := pelu.mutation.Status(); ok {
		_spec.SetField(pipelineexecutionlog.FieldStatus, field.TypeString, value)
	}
	if value, ok := pelu.mutation.CreatedAt(); ok {
		_spec.SetField(pipelineexecutionlog.FieldCreatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(pelu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pelu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pipelineexecutionlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pelu.mutation.done = true
	return n, nil
}

// PipelineExecutionLogUpdateOne is the builder for updating a single PipelineExecutionLog entity.
type PipelineExecutionLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PipelineExecutionLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEnv sets the "env" field.
func (peluo *PipelineExecutionLogUpdateOne) SetEnv(s string) *PipelineExecutionLogUpdateOne {
	peluo.mutation.SetEnv(s)
	return peluo
}

// SetNillableEnv sets the "env" field if the given value is not nil.
func (peluo *PipelineExecutionLogUpdateOne) SetNillableEnv(s *string) *PipelineExecutionLogUpdateOne {
	if s != nil {
		peluo.SetEnv(*s)
	}
	return peluo
}

// SetType sets the "type" field.
func (peluo *PipelineExecutionLogUpdateOne) SetType(s string) *PipelineExecutionLogUpdateOne {
	peluo.mutation.SetType(s)
	return peluo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (peluo *PipelineExecutionLogUpdateOne) SetNillableType(s *string) *PipelineExecutionLogUpdateOne {
	if s != nil {
		peluo.SetType(*s)
	}
	return peluo
}

// SetEventType sets the "event_type" field.
func (peluo *PipelineExecutionLogUpdateOne) SetEventType(s string) *PipelineExecutionLogUpdateOne {
	peluo.mutation.SetEventType(s)
	return peluo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (peluo *PipelineExecutionLogUpdateOne) SetNillableEventType(s *string) *PipelineExecutionLogUpdateOne {
	if s != nil {
		peluo.SetEventType(*s)
	}
	return peluo
}

// SetPipelineName sets the "pipeline_name" field.
func (peluo *PipelineExecutionLogUpdateOne) SetPipelineName(s string) *PipelineExecutionLogUpdateOne {
	peluo.mutation.SetPipelineName(s)
	return peluo
}

// SetNillablePipelineName sets the "pipeline_name" field if the given value is not nil.
func (peluo *PipelineExecutionLogUpdateOne) SetNillablePipelineName(s *string) *PipelineExecutionLogUpdateOne {
	if s != nil {
		peluo.SetPipelineName(*s)
	}
	return peluo
}

// SetUsernameEmail sets the "username_email" field.
func (peluo *PipelineExecutionLogUpdateOne) SetUsernameEmail(s string) *PipelineExecutionLogUpdateOne {
	peluo.mutation.SetUsernameEmail(s)
	return peluo
}

// SetNillableUsernameEmail sets the "username_email" field if the given value is not nil.
func (peluo *PipelineExecutionLogUpdateOne) SetNillableUsernameEmail(s *string) *PipelineExecutionLogUpdateOne {
	if s != nil {
		peluo.SetUsernameEmail(*s)
	}
	return peluo
}

// SetCommitID sets the "commit_id" field.
func (peluo *PipelineExecutionLogUpdateOne) SetCommitID(s string) *PipelineExecutionLogUpdateOne {
	peluo.mutation.SetCommitID(s)
	return peluo
}

// SetNillableCommitID sets the "commit_id" field if the given value is not nil.
func (peluo *PipelineExecutionLogUpdateOne) SetNillableCommitID(s *string) *PipelineExecutionLogUpdateOne {
	if s != nil {
		peluo.SetCommitID(*s)
	}
	return peluo
}

// SetProjectURL sets the "project_url" field.
func (peluo *PipelineExecutionLogUpdateOne) SetProjectURL(s string) *PipelineExecutionLogUpdateOne {
	peluo.mutation.SetProjectURL(s)
	return peluo
}

// SetNillableProjectURL sets the "project_url" field if the given value is not nil.
func (peluo *PipelineExecutionLogUpdateOne) SetNillableProjectURL(s *string) *PipelineExecutionLogUpdateOne {
	if s != nil {
		peluo.SetProjectURL(*s)
	}
	return peluo
}

// SetStatus sets the "status" field.
func (peluo *PipelineExecutionLogUpdateOne) SetStatus(s string) *PipelineExecutionLogUpdateOne {
	peluo.mutation.SetStatus(s)
	return peluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (peluo *PipelineExecutionLogUpdateOne) SetNillableStatus(s *string) *PipelineExecutionLogUpdateOne {
	if s != nil {
		peluo.SetStatus(*s)
	}
	return peluo
}

// SetCreatedAt sets the "created_at" field.
func (peluo *PipelineExecutionLogUpdateOne) SetCreatedAt(t time.Time) *PipelineExecutionLogUpdateOne {
	peluo.mutation.SetCreatedAt(t)
	return peluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (peluo *PipelineExecutionLogUpdateOne) SetNillableCreatedAt(t *time.Time) *PipelineExecutionLogUpdateOne {
	if t != nil {
		peluo.SetCreatedAt(*t)
	}
	return peluo
}

// Mutation returns the PipelineExecutionLogMutation object of the builder.
func (peluo *PipelineExecutionLogUpdateOne) Mutation() *PipelineExecutionLogMutation {
	return peluo.mutation
}

// Where appends a list predicates to the PipelineExecutionLogUpdate builder.
func (peluo *PipelineExecutionLogUpdateOne) Where(ps ...predicate.PipelineExecutionLog) *PipelineExecutionLogUpdateOne {
	peluo.mutation.Where(ps...)
	return peluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (peluo *PipelineExecutionLogUpdateOne) Select(field string, fields ...string) *PipelineExecutionLogUpdateOne {
	peluo.fields = append([]string{field}, fields...)
	return peluo
}

// Save executes the query and returns the updated PipelineExecutionLog entity.
func (peluo *PipelineExecutionLogUpdateOne) Save(ctx context.Context) (*PipelineExecutionLog, error) {
	return withHooks(ctx, peluo.sqlSave, peluo.mutation, peluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peluo *PipelineExecutionLogUpdateOne) SaveX(ctx context.Context) *PipelineExecutionLog {
	node, err := peluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (peluo *PipelineExecutionLogUpdateOne) Exec(ctx context.Context) error {
	_, err := peluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peluo *PipelineExecutionLogUpdateOne) ExecX(ctx context.Context) {
	if err := peluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (peluo *PipelineExecutionLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PipelineExecutionLogUpdateOne {
	peluo.modifiers = append(peluo.modifiers, modifiers...)
	return peluo
}

func (peluo *PipelineExecutionLogUpdateOne) sqlSave(ctx context.Context) (_node *PipelineExecutionLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(pipelineexecutionlog.Table, pipelineexecutionlog.Columns, sqlgraph.NewFieldSpec(pipelineexecutionlog.FieldID, field.TypeInt64))
	id, ok := peluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PipelineExecutionLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := peluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pipelineexecutionlog.FieldID)
		for _, f := range fields {
			if !pipelineexecutionlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pipelineexecutionlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := peluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peluo.mutation.Env(); ok {
		_spec.SetField(pipelineexecutionlog.FieldEnv, field.TypeString, value)
	}
	if value, ok := peluo.mutation.GetType(); ok {
		_spec.SetField(pipelineexecutionlog.FieldType, field.TypeString, value)
	}
	if value, ok := peluo.mutation.EventType(); ok {
		_spec.SetField(pipelineexecutionlog.FieldEventType, field.TypeString, value)
	}
	if value, ok := peluo.mutation.PipelineName(); ok {
		_spec.SetField(pipelineexecutionlog.FieldPipelineName, field.TypeString, value)
	}
	if value, ok := peluo.mutation.UsernameEmail(); ok {
		_spec.SetField(pipelineexecutionlog.FieldUsernameEmail, field.TypeString, value)
	}
	if value, ok := peluo.mutation.CommitID(); ok {
		_spec.SetField(pipelineexecutionlog.FieldCommitID, field.TypeString, value)
	}
	if value, ok := peluo.mutation.ProjectURL(); ok {
		_spec.SetField(pipelineexecutionlog.FieldProjectURL, field.TypeString, value)
	}
	if value, ok := peluo.mutation.Status(); ok {
		_spec.SetField(pipelineexecutionlog.FieldStatus, field.TypeString, value)
	}
	if value, ok := peluo.mutation.CreatedAt(); ok {
		_spec.SetField(pipelineexecutionlog.FieldCreatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(peluo.modifiers...)
	_node = &PipelineExecutionLog{config: peluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, peluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pipelineexecutionlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	peluo.mutation.done = true
	return _node, nil
}
